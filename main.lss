
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000078e  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800102  00800102  00000824  2**0
                  ALLOC
  3 .stab         00000dd4  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000003b  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001633  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000078  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001826  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000d7f  00000000  00000000  00002f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000de6  00000000  00000000  00003ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000000d0  00000000  00000000  00004a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000705  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000b1e  00000000  00000000  0000525d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000158  00000000  00000000  00005d7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__ctors_end>
   4:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_1>
   8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  14:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  1c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  44:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  48:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  4c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>

00000068 <usbDescriptorHidReport>:
  68:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
  78:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
  88:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
  98:	75 08 15 00 25 65 05 07 19 00 29 65 81 00 c0        u...%e....)e...

000000a7 <usbDescriptorConfiguration>:
  a7:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
  b7:	00 00 09 21 01 01 00 01 22 23 00 07 05 81 03 08     ...!...."#......
  c7:	00 0a                                               ..

000000c9 <usbDescriptorDevice>:
  c9:	12 01 10 01 00 00 00 08 42 42 31 e1 00 01 01 02     ........BB1.....
  d9:	00 01                                               ..

000000db <usbDescriptorStringDevice>:
  db:	18 03 55 00 73 00 62 00 4b 00 65 00 79 00 62 00     ..U.s.b.K.e.y.b.
  eb:	6f 00 61 00 72 00 64 00                             o.a.r.d.

000000f3 <usbDescriptorStringVendor>:
  f3:	20 03 72 00 61 00 6e 00 63 00 69 00 64 00 62 00      .r.a.n.c.i.d.b.
 103:	61 00 63 00 6f 00 6e 00 2e 00 63 00 6f 00 6d 00     a.c.o.n...c.o.m.

00000113 <usbDescriptorString0>:
 113:	04 03 09 04 00                                      .....

00000118 <__ctors_end>:
 118:	11 24       	eor	r1, r1
 11a:	1f be       	out	0x3f, r1	; 63
 11c:	cf ef       	ldi	r28, 0xFF	; 255
 11e:	d8 e0       	ldi	r29, 0x08	; 8
 120:	de bf       	out	0x3e, r29	; 62
 122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
 124:	11 e0       	ldi	r17, 0x01	; 1
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b1 e0       	ldi	r27, 0x01	; 1
 12a:	ee e8       	ldi	r30, 0x8E	; 142
 12c:	f7 e0       	ldi	r31, 0x07	; 7
 12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
 130:	05 90       	lpm	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	a2 30       	cpi	r26, 0x02	; 2
 136:	b1 07       	cpc	r27, r17
 138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	a2 e0       	ldi	r26, 0x02	; 2
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	ad 33       	cpi	r26, 0x3D	; 61
 146:	b2 07       	cpc	r27, r18
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <main>
 14e:	0c 94 c5 03 	jmp	0x78a	; 0x78a <_exit>

00000152 <__bad_interrupt>:
 152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000156 <usb_kbd_init>:

uint8_t report[BUFFER_SIZE];

void usb_kbd_init(void)
{
	PORTD = 0;
 156:	1b b8       	out	0x0b, r1	; 11
	DDRD |= ~USBMASK;
 158:	8a b1       	in	r24, 0x0a	; 10
 15a:	8b 6e       	ori	r24, 0xEB	; 235
 15c:	8a b9       	out	0x0a, r24	; 10
	asm volatile("cli");
 15e:	f8 94       	cli
	usbDeviceDisconnect();
 160:	55 98       	cbi	0x0a, 5	; 10
 162:	5d 98       	cbi	0x0b, 5	; 11
	usbDeviceConnect();
 164:	55 9a       	sbi	0x0a, 5	; 10
 166:	5d 9a       	sbi	0x0b, 5	; 11
	usbInit();
 168:	0e 94 2b 02 	call	0x456	; 0x456 <usbInit>
	asm volatile("sei");
 16c:	78 94       	sei
	memset(report, 0, sizeof(report));
 16e:	e3 e0       	ldi	r30, 0x03	; 3
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	df 01       	movw	r26, r30
 176:	1d 92       	st	X+, r1
 178:	8a 95       	dec	r24
 17a:	e9 f7       	brne	.-6      	; 0x176 <usb_kbd_init+0x20>
	usbSetInterrupt(report, sizeof(report));
 17c:	64 e0       	ldi	r22, 0x04	; 4
 17e:	cf 01       	movw	r24, r30
 180:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <usbSetInterrupt>
	usbDeviceDisconnect();
 184:	55 98       	cbi	0x0a, 5	; 10
 186:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	bf ef       	ldi	r27, 0xFF	; 255
 18a:	24 e3       	ldi	r18, 0x34	; 52
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	b1 50       	subi	r27, 0x01	; 1
 190:	20 40       	sbci	r18, 0x00	; 0
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <usb_kbd_init+0x38>
 196:	00 c0       	rjmp	.+0      	; 0x198 <usb_kbd_init+0x42>
 198:	00 00       	nop
	_delay_ms(250);
	usbDeviceConnect();
 19a:	55 9a       	sbi	0x0a, 5	; 10
 19c:	5d 9a       	sbi	0x0b, 5	; 11
}
 19e:	08 95       	ret

000001a0 <usb_kbd_update>:

void usb_kbd_update(void)
{
	usbPoll();
 1a0:	0c 94 20 01 	jmp	0x240	; 0x240 <usbPoll>

000001a4 <usb_kbd_send>:
}

void usb_kbd_send(uint8_t key, uint8_t modifiers)
{
	while(!usbInterruptIsReady()) ;
 1a4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <usbTxStatus1>
 1a8:	94 ff       	sbrs	r25, 4
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <usb_kbd_send>
	memset(report, 0, sizeof(report));
 1ac:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <report+0x3>
 1b0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <report+0x2>
	report[0] = modifiers;
 1b4:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <report>
	report[1] = key;
 1b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <report+0x1>
	usbSetInterrupt(report, sizeof(report));
 1bc:	64 e0       	ldi	r22, 0x04	; 4
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <usbSetInterrupt>
	while(!usbInterruptIsReady()) ;
 1c6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <usbTxStatus1>
 1ca:	84 ff       	sbrs	r24, 4
 1cc:	fc cf       	rjmp	.-8      	; 0x1c6 <usb_kbd_send+0x22>
	memset(report, 0, sizeof(report));
 1ce:	e3 e0       	ldi	r30, 0x03	; 3
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	df 01       	movw	r26, r30
 1d6:	1d 92       	st	X+, r1
 1d8:	8a 95       	dec	r24
 1da:	e9 f7       	brne	.-6      	; 0x1d6 <usb_kbd_send+0x32>
	usbSetInterrupt(report, sizeof(report));
 1dc:	64 e0       	ldi	r22, 0x04	; 4
 1de:	cf 01       	movw	r24, r30
 1e0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <usbSetInterrupt>

000001e4 <usbFunctionSetup>:
}

uint8_t usbFunctionSetup(uint8_t data[8]) 
{
	usbMsgPtr = report;
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <usbMsgPtr+0x1>
 1ec:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <usbMsgPtr>
	return 0;
}
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret

000001f4 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 1f4:	cf 93       	push	r28
 1f6:	c6 2f       	mov	r28, r22
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 1f8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <usbTxStatus1>
 1fc:	24 ff       	sbrs	r18, 4
 1fe:	1c c0       	rjmp	.+56     	; 0x238 <usbSetInterrupt+0x44>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 200:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <usbTxStatus1+0x1>
 204:	38 e8       	ldi	r19, 0x88	; 136
 206:	23 27       	eor	r18, r19
 208:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <usbTxStatus1+0x1>
{
 20c:	e4 e1       	ldi	r30, 0x14	; 20
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	9c 01       	movw	r18, r24
        *p++ = *data++;
 212:	d9 01       	movw	r26, r18
 214:	2f 5f       	subi	r18, 0xFF	; 255
 216:	3f 4f       	sbci	r19, 0xFF	; 255
 218:	9c 91       	ld	r25, X
 21a:	91 93       	st	Z+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 21c:	9c 2f       	mov	r25, r28
 21e:	92 1b       	sub	r25, r18
 220:	98 0f       	add	r25, r24
 222:	b9 f7       	brne	.-18     	; 0x212 <usbSetInterrupt+0x1e>
    usbCrc16Append(&txStatus->buffer[1], len);
 224:	6c 2f       	mov	r22, r28
 226:	84 e1       	ldi	r24, 0x14	; 20
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 4d 02 	call	0x49a	; 0x49a <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 22e:	cc 5f       	subi	r28, 0xFC	; 252
 230:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <usbTxStatus1>
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 234:	cf 91       	pop	r28
 236:	08 95       	ret
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 238:	2a e5       	ldi	r18, 0x5A	; 90
 23a:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <usbTxStatus1>
 23e:	e6 cf       	rjmp	.-52     	; 0x20c <usbSetInterrupt+0x18>

00000240 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 244:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <usbRxLen>
 248:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 24a:	87 fd       	sbrc	r24, 7
 24c:	28 c0       	rjmp	.+80     	; 0x29e <usbPoll+0x5e>
    if(usbRxToken == (uchar)USBPID_SETUP){
 24e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <usbRxToken>
 252:	9d 32       	cpi	r25, 0x2D	; 45
 254:	11 f5       	brne	.+68     	; 0x29a <usbPoll+0x5a>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 256:	88 30       	cpi	r24, 0x08	; 8
 258:	01 f5       	brne	.+64     	; 0x29a <usbPoll+0x5a>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 25a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <usbInputBufOffset>
 25e:	cc e0       	ldi	r28, 0x0C	; 12
 260:	d0 e0       	ldi	r29, 0x00	; 0
 262:	c8 1b       	sub	r28, r24
 264:	d1 09       	sbc	r29, r1
 266:	c9 5d       	subi	r28, 0xD9	; 217
 268:	de 4f       	sbci	r29, 0xFE	; 254
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 26a:	83 ec       	ldi	r24, 0xC3	; 195
 26c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 270:	8a e5       	ldi	r24, 0x5A	; 90
 272:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <usbTxLen>
        usbMsgFlags = 0;
 276:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 27a:	88 81       	ld	r24, Y
 27c:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 27e:	09 f4       	brne	.+2      	; 0x282 <usbPoll+0x42>
 280:	62 c0       	rjmp	.+196    	; 0x346 <usbPoll+0x106>
            replyLen = usbFunctionSetup(data);
 282:	ce 01       	movw	r24, r28
 284:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <usbFunctionSetup>
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 288:	9f 81       	ldd	r25, Y+7	; 0x07
 28a:	91 11       	cpse	r25, r1
 28c:	04 c0       	rjmp	.+8      	; 0x296 <usbPoll+0x56>
 28e:	9e 81       	ldd	r25, Y+6	; 0x06
 290:	98 17       	cp	r25, r24
 292:	08 f4       	brcc	.+2      	; 0x296 <usbPoll+0x56>
 294:	89 2f       	mov	r24, r25
        usbMsgLen = replyLen;
 296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 29a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 29e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <usbTxLen>
 2a2:	84 ff       	sbrs	r24, 4
 2a4:	43 c0       	rjmp	.+134    	; 0x32c <usbPoll+0xec>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 2a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2aa:	8f 3f       	cpi	r24, 0xFF	; 255
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <usbPoll+0x70>
 2ae:	3e c0       	rjmp	.+124    	; 0x32c <usbPoll+0xec>
    if(wantLen > 8)
 2b0:	c8 2f       	mov	r28, r24
 2b2:	89 30       	cpi	r24, 0x09	; 9
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <usbPoll+0x78>
 2b6:	c8 e0       	ldi	r28, 0x08	; 8
    usbMsgLen -= wantLen;
 2b8:	98 2f       	mov	r25, r24
 2ba:	9c 1b       	sub	r25, r28
 2bc:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 2c0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <usbTxBuf>
 2c4:	28 e8       	ldi	r18, 0x88	; 136
 2c6:	92 27       	eor	r25, r18
 2c8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <usbTxBuf>
    if(len > 0){    /* don't bother app with 0 sized reads */
 2cc:	88 23       	and	r24, r24
 2ce:	01 f1       	breq	.+64     	; 0x310 <usbPoll+0xd0>
            uchar i = len, *r = usbMsgPtr;
 2d0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <usbMsgPtr>
 2d4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 2d8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 2dc:	4c 2f       	mov	r20, r28
 2de:	48 0f       	add	r20, r24
 2e0:	26 ff       	sbrs	r18, 6
 2e2:	ae c0       	rjmp	.+348    	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
            uchar i = len, *r = usbMsgPtr;
 2e4:	fc 01       	movw	r30, r24
 2e6:	28 e0       	ldi	r18, 0x08	; 8
 2e8:	31 e0       	ldi	r19, 0x01	; 1
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 2ea:	54 91       	lpm	r21, Z
                    *data++ = c;
 2ec:	d9 01       	movw	r26, r18
 2ee:	5c 93       	st	X, r21
 2f0:	2f 5f       	subi	r18, 0xFF	; 255
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
                    r++;
 2f4:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 2f6:	4e 13       	cpse	r20, r30
 2f8:	f8 cf       	rjmp	.-16     	; 0x2ea <usbPoll+0xaa>
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	2c 0f       	add	r18, r28
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	2f 5f       	subi	r18, 0xFF	; 255
 302:	3f 4f       	sbci	r19, 0xFF	; 255
 304:	82 0f       	add	r24, r18
 306:	93 1f       	adc	r25, r19
            usbMsgPtr = r;
 308:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <usbMsgPtr+0x1>
 30c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <usbMsgPtr>
        usbCrc16Append(&usbTxBuf[1], len);
 310:	6c 2f       	mov	r22, r28
 312:	88 e0       	ldi	r24, 0x08	; 8
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 4d 02 	call	0x49a	; 0x49a <usbCrc16Append>
        len += 4;           /* length including sync byte */
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	8c 0f       	add	r24, r28
        if(len < 12)        /* a partial package identifies end of message */
 31e:	c8 30       	cpi	r28, 0x08	; 8
 320:	19 f0       	breq	.+6      	; 0x328 <usbPoll+0xe8>
            usbMsgLen = USB_NO_MSG;
 322:	9f ef       	ldi	r25, 0xFF	; 255
 324:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
    usbTxLen = len;
 328:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <usbTxLen>
            uchar i = len, *r = usbMsgPtr;
 32c:	84 e1       	ldi	r24, 0x14	; 20
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 32e:	99 b1       	in	r25, 0x09	; 9
 330:	94 71       	andi	r25, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 332:	31 f4       	brne	.+12     	; 0x340 <usbPoll+0x100>
    for(i = 20; i > 0; i--){
 334:	81 50       	subi	r24, 0x01	; 1
 336:	d9 f7       	brne	.-10     	; 0x32e <usbPoll+0xee>
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 338:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 33c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	08 95       	ret
uchar   value = rq->wValue.bytes[0];
 346:	2a 81       	ldd	r18, Y+2	; 0x02
    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 348:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 34c:	99 81       	ldd	r25, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 34e:	91 11       	cpse	r25, r1
 350:	0a c0       	rjmp	.+20     	; 0x366 <usbPoll+0x126>
        dataPtr[1] = 0;
 352:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <usbTxBuf+0xa>
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 356:	20 e1       	ldi	r18, 0x10	; 16
 358:	31 e0       	ldi	r19, 0x01	; 1
        len = 2;
 35a:	82 e0       	ldi	r24, 0x02	; 2
    usbMsgPtr = dataPtr;
 35c:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <usbMsgPtr+0x1>
 360:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <usbMsgPtr>
 364:	91 cf       	rjmp	.-222    	; 0x288 <usbPoll+0x48>
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 366:	95 30       	cpi	r25, 0x05	; 5
 368:	29 f4       	brne	.+10     	; 0x374 <usbPoll+0x134>
        usbNewDeviceAddr = value;
 36a:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <usbNewDeviceAddr>
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 36e:	20 e1       	ldi	r18, 0x10	; 16
 370:	31 e0       	ldi	r19, 0x01	; 1
 372:	f4 cf       	rjmp	.-24     	; 0x35c <usbPoll+0x11c>
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 374:	96 30       	cpi	r25, 0x06	; 6
 376:	09 f0       	breq	.+2      	; 0x37a <usbPoll+0x13a>
 378:	4c c0       	rjmp	.+152    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
    SWITCH_START(rq->wValue.bytes[1])
 37a:	9b 81       	ldd	r25, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 37c:	91 30       	cpi	r25, 0x01	; 1
 37e:	59 f4       	brne	.+22     	; 0x396 <usbPoll+0x156>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 380:	89 ec       	ldi	r24, 0xC9	; 201
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <usbMsgPtr+0x1>
 388:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <usbMsgPtr>
 38c:	82 e1       	ldi	r24, 0x12	; 18
    usbMsgFlags = flags;
 38e:	90 e4       	ldi	r25, 0x40	; 64
 390:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
        goto skipMsgPtrAssignment;
 394:	79 cf       	rjmp	.-270    	; 0x288 <usbPoll+0x48>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 396:	92 30       	cpi	r25, 0x02	; 2
 398:	41 f4       	brne	.+16     	; 0x3aa <usbPoll+0x16a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 39a:	87 ea       	ldi	r24, 0xA7	; 167
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <usbMsgPtr+0x1>
 3a2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <usbMsgPtr>
 3a6:	82 e2       	ldi	r24, 0x22	; 34
 3a8:	f2 cf       	rjmp	.-28     	; 0x38e <usbPoll+0x14e>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 3aa:	93 30       	cpi	r25, 0x03	; 3
 3ac:	f1 f4       	brne	.+60     	; 0x3ea <usbPoll+0x1aa>
        SWITCH_CASE(0)
 3ae:	21 11       	cpse	r18, r1
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <usbPoll+0x182>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 3b2:	83 e1       	ldi	r24, 0x13	; 19
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <usbMsgPtr+0x1>
 3ba:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <usbMsgPtr>
 3be:	84 e0       	ldi	r24, 0x04	; 4
 3c0:	e6 cf       	rjmp	.-52     	; 0x38e <usbPoll+0x14e>
        SWITCH_CASE(1)
 3c2:	21 30       	cpi	r18, 0x01	; 1
 3c4:	41 f4       	brne	.+16     	; 0x3d6 <usbPoll+0x196>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 3c6:	83 ef       	ldi	r24, 0xF3	; 243
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <usbMsgPtr+0x1>
 3ce:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <usbMsgPtr>
 3d2:	80 e2       	ldi	r24, 0x20	; 32
 3d4:	dc cf       	rjmp	.-72     	; 0x38e <usbPoll+0x14e>
        SWITCH_CASE(2)
 3d6:	22 30       	cpi	r18, 0x02	; 2
 3d8:	d1 f6       	brne	.-76     	; 0x38e <usbPoll+0x14e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 3da:	8b ed       	ldi	r24, 0xDB	; 219
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <usbMsgPtr+0x1>
 3e2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <usbMsgPtr>
 3e6:	88 e1       	ldi	r24, 0x18	; 24
 3e8:	d2 cf       	rjmp	.-92     	; 0x38e <usbPoll+0x14e>
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 3ea:	91 32       	cpi	r25, 0x21	; 33
 3ec:	41 f4       	brne	.+16     	; 0x3fe <usbPoll+0x1be>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 3ee:	89 eb       	ldi	r24, 0xB9	; 185
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <usbMsgPtr+0x1>
 3f6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <usbMsgPtr>
 3fa:	89 e0       	ldi	r24, 0x09	; 9
 3fc:	c8 cf       	rjmp	.-112    	; 0x38e <usbPoll+0x14e>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 3fe:	92 32       	cpi	r25, 0x22	; 34
 400:	31 f6       	brne	.-116    	; 0x38e <usbPoll+0x14e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 402:	88 e6       	ldi	r24, 0x68	; 104
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <usbMsgPtr+0x1>
 40a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <usbMsgPtr>
 40e:	83 e2       	ldi	r24, 0x23	; 35
 410:	be cf       	rjmp	.-132    	; 0x38e <usbPoll+0x14e>
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 412:	98 30       	cpi	r25, 0x08	; 8
 414:	71 f0       	breq	.+28     	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 416:	99 30       	cpi	r25, 0x09	; 9
 418:	19 f4       	brne	.+6      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
        usbConfiguration = value;
 41a:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <usbConfiguration>
}
 41e:	a7 cf       	rjmp	.-178    	; 0x36e <usbPoll+0x12e>
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 420:	9a 30       	cpi	r25, 0x0A	; 10
 422:	59 f0       	breq	.+22     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 424:	9b 30       	cpi	r25, 0x0B	; 11
 426:	09 f0       	breq	.+2      	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 428:	a2 cf       	rjmp	.-188    	; 0x36e <usbPoll+0x12e>
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 42a:	9b e4       	ldi	r25, 0x4B	; 75
 42c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <usbTxStatus1+0x1>
 430:	9e cf       	rjmp	.-196    	; 0x36e <usbPoll+0x12e>
        dataPtr = &usbConfiguration;  /* send current configuration value */
 432:	26 e2       	ldi	r18, 0x26	; 38
 434:	31 e0       	ldi	r19, 0x01	; 1
        len = 1;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	91 cf       	rjmp	.-222    	; 0x35c <usbPoll+0x11c>
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 43a:	20 e1       	ldi	r18, 0x10	; 16
 43c:	31 e0       	ldi	r19, 0x01	; 1
 43e:	fb cf       	rjmp	.-10     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 440:	e8 e0       	ldi	r30, 0x08	; 8
 442:	f1 e0       	ldi	r31, 0x01	; 1
            uchar i = len, *r = usbMsgPtr;
 444:	9c 01       	movw	r18, r24
                    *data++ = *r++;
 446:	d9 01       	movw	r26, r18
 448:	2f 5f       	subi	r18, 0xFF	; 255
 44a:	3f 4f       	sbci	r19, 0xFF	; 255
 44c:	5c 91       	ld	r21, X
 44e:	51 93       	st	Z+, r21
                }while(--i);
 450:	42 13       	cpse	r20, r18
 452:	f9 cf       	rjmp	.-14     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
 454:	52 cf       	rjmp	.-348    	; 0x2fa <usbPoll+0xba>

00000456 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 456:	e9 e6       	ldi	r30, 0x69	; 105
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	82 60       	ori	r24, 0x02	; 2
 45e:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 460:	e8 9a       	sbi	0x1d, 0	; 29
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 462:	e2 e1       	ldi	r30, 0x12	; 18
 464:	f1 e0       	ldi	r31, 0x01	; 1
 466:	8b e4       	ldi	r24, 0x4B	; 75
 468:	81 83       	std	Z+1, r24	; 0x01
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 46a:	8a e5       	ldi	r24, 0x5A	; 90
 46c:	80 83       	st	Z, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 46e:	08 95       	ret

00000470 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 470:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 472:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 474:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 476:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 478:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 47a:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 47c:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 47e:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 480:	09 c0       	rjmp	.+18     	; 0x494 <usbCrcLoopEntry>

00000482 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 482:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 484:	82 27       	eor	r24, r18

00000486 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 486:	97 95       	ror	r25
    ror     resCrcL
 488:	87 95       	ror	r24
    brcs    usbCrcNoXor
 48a:	10 f0       	brcs	.+4      	; 0x490 <usbCrcNoXor>
    eor     resCrcL, polyL
 48c:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 48e:	95 27       	eor	r25, r21

00000490 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 490:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 492:	c8 f3       	brcs	.-14     	; 0x486 <usbCrcBitLoop>

00000494 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 494:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 496:	a8 f3       	brcs	.-22     	; 0x482 <usbCrcByteLoop>

00000498 <usbCrcReady>:
usbCrcReady:
    ret
 498:	08 95       	ret

0000049a <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 49a:	ea df       	rcall	.-44     	; 0x470 <usbCrc16>
    st      ptr+, resCrcL
 49c:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 49e:	9d 93       	st	X+, r25
    ret
 4a0:	08 95       	ret

000004a2 <__vector_1>:
; Numbers in brackets are clocks counted from center of last sync bit
; when instruction starts

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
 4a2:	cf 93       	push	r28
    in      YL, SREG            ;[-23]
 4a4:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-22]
 4a6:	cf 93       	push	r28
    push    YH                  ;[-20]
 4a8:	df 93       	push	r29

000004aa <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 4aa:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 4ac:	4c 9b       	sbis	0x09, 4	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 4ae:	e9 f7       	brne	.-6      	; 0x4aa <waitForJ>

000004b0 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 4b0:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK              ;[-14]
 4b2:	0b c0       	rjmp	.+22     	; 0x4ca <foundK>
    sbis    USBIN, USBMINUS
 4b4:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 4b6:	09 c0       	rjmp	.+18     	; 0x4ca <foundK>
    sbis    USBIN, USBMINUS
 4b8:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <foundK>
    sbis    USBIN, USBMINUS
 4bc:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <foundK>
    sbis    USBIN, USBMINUS
 4c0:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <foundK>
    sbis    USBIN, USBMINUS
 4c4:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 4c6:	01 c0       	rjmp	.+2      	; 0x4ca <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 4c8:	8b c0       	rjmp	.+278    	; 0x5e0 <sofError>

000004ca <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-12]
 4ca:	6f 93       	push	r22
;   [---]                       ;[-11]
    lds     YL, usbInputBufOffset;[-10]
 4cc:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <usbInputBufOffset>
;   [---]                       ;[-9]
    clr     YH                  ;[-8]
 4d0:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
 4d2:	c9 5d       	subi	r28, 0xD9	; 217
    sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
 4d4:	de 4f       	sbci	r29, 0xFE	; 254
    push    shift               ;[-5]
 4d6:	2f 93       	push	r18
;   [---]                       ;[-4]
    ldi     bitcnt, 0x55        ;[-3] [rx loop init]
 4d8:	65 e5       	ldi	r22, 0x55	; 85
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 4da:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    haveTwoBitsK        ;[-1]
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <haveTwoBitsK>
    pop     shift               ;[0] undo the push from before
 4de:	2f 91       	pop	r18
    pop     bitcnt              ;[2] undo the push from before
 4e0:	6f 91       	pop	r22
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 4e2:	e6 cf       	rjmp	.-52     	; 0x4b0 <waitForK>

000004e4 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1              ;[1]
 4e4:	0f 93       	push	r16
    push    x2              ;[3]
 4e6:	1f 93       	push	r17
    push    x3              ;[5]
 4e8:	4f 93       	push	r20
    ldi     shift, 0        ;[7]
 4ea:	20 e0       	ldi	r18, 0x00	; 0
    ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
 4ec:	40 e1       	ldi	r20, 0x10	; 16
    push    x4              ;[9] == leap
 4ee:	5f 93       	push	r21

    in      x1, USBIN       ;[11] <-- sample bit 0
 4f0:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK     ;[12]
 4f2:	04 71       	andi	r16, 0x14	; 20
    bst     x1, USBMINUS    ;[13]
 4f4:	04 fb       	bst	r16, 4
    bld     shift, 7        ;[14]
 4f6:	27 f9       	bld	r18, 7
    push    cnt             ;[15]
 4f8:	3f 93       	push	r19
    ldi     leap, 0         ;[17] [rx loop init]
 4fa:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
 4fc:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[19] arrives at [21]
 4fe:	39 c0       	rjmp	.+114    	; 0x572 <rxbit1>

00000500 <unstuff6>:

; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
; accordingly to approximate this value in the long run.

unstuff6:
    andi    x2, USBMASK ;[03]
 500:	14 71       	andi	r17, 0x14	; 20
    ori     x3, 1<<6    ;[04] will not be shifted any more
 502:	40 64       	ori	r20, 0x40	; 64
    andi    shift, ~0x80;[05]
 504:	2f 77       	andi	r18, 0x7F	; 127
    mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
 506:	01 2f       	mov	r16, r17
    subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
 508:	5f 5f       	subi	r21, 0xFF	; 255
    rjmp    didUnstuff6 ;[08]
 50a:	1e c0       	rjmp	.+60     	; 0x548 <didUnstuff6>

0000050c <unstuff7>:

unstuff7:
    ori     x3, 1<<7    ;[09] will not be shifted any more
 50c:	40 68       	ori	r20, 0x80	; 128
    in      x2, USBIN   ;[00] [10]  re-sample bit 7
 50e:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;[01]
 510:	14 71       	andi	r17, 0x14	; 20
    andi    shift, ~0x80;[02]
 512:	2f 77       	andi	r18, 0x7F	; 127
    subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
 514:	52 50       	subi	r21, 0x02	; 2
    rjmp    didUnstuff7 ;[04]
 516:	1f c0       	rjmp	.+62     	; 0x556 <didUnstuff7>

00000518 <unstuffEven>:

unstuffEven:
    ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
 518:	40 64       	ori	r20, 0x40	; 64
    in      x1, USBIN   ;[00] [10]
 51a:	09 b1       	in	r16, 0x09	; 9
    andi    shift, ~0x80;[01]
 51c:	2f 77       	andi	r18, 0x7F	; 127
    andi    x1, USBMASK ;[02]
 51e:	04 71       	andi	r16, 0x14	; 20
    breq    se0         ;[03]
 520:	d1 f1       	breq	.+116    	; 0x596 <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 522:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 524:	00 c0       	rjmp	.+0      	; 0x526 <unstuffEven+0xe>
    rjmp    didUnstuffE ;[06]
 526:	23 c0       	rjmp	.+70     	; 0x56e <didUnstuffE>

00000528 <unstuffOdd>:

unstuffOdd:
    ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
 528:	40 62       	ori	r20, 0x20	; 32
    in      x2, USBIN   ;[00] [10]
 52a:	19 b1       	in	r17, 0x09	; 9
    andi    shift, ~0x80;[01]
 52c:	2f 77       	andi	r18, 0x7F	; 127
    andi    x2, USBMASK ;[02]
 52e:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[03]
 530:	91 f1       	breq	.+100    	; 0x596 <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 532:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 534:	00 c0       	rjmp	.+0      	; 0x536 <unstuffOdd+0xe>
    rjmp    didUnstuffO ;[06]
 536:	25 c0       	rjmp	.+74     	; 0x582 <didUnstuffO>

00000538 <rxByteLoop>:

rxByteLoop:
    andi    x1, USBMASK ;[03]
 538:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[04]
 53a:	10 27       	eor	r17, r16
    subi    leap, 1     ;[05]
 53c:	51 50       	subi	r21, 0x01	; 1
    brpl    skipLeap    ;[06]
 53e:	12 f4       	brpl	.+4      	; 0x544 <skipLeap>
    subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
 540:	5d 5f       	subi	r21, 0xFD	; 253
    nop                 ;1
 542:	00 00       	nop

00000544 <skipLeap>:
skipLeap:
    subi    x2, 1       ;[08]
 544:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[09]
 546:	27 95       	ror	r18

00000548 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0xfc ;[10]
 548:	2c 3f       	cpi	r18, 0xFC	; 252
    in      x2, USBIN   ;[00] [11] <-- sample bit 7
 54a:	19 b1       	in	r17, 0x09	; 9
    brcc    unstuff6    ;[01]
 54c:	c8 f6       	brcc	.-78     	; 0x500 <unstuff6>
    andi    x2, USBMASK ;[02]
 54e:	14 71       	andi	r17, 0x14	; 20
    eor     x1, x2      ;[03]
 550:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 552:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 554:	27 95       	ror	r18

00000556 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0xfc ;[06]
 556:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuff7    ;[07]
 558:	c8 f6       	brcc	.-78     	; 0x50c <unstuff7>
    eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
 55a:	42 27       	eor	r20, r18
    st      y+, x3      ;[09] store data
 55c:	49 93       	st	Y+, r20

0000055e <rxBitLoop>:
rxBitLoop:
    in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
 55e:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;[01]
 560:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[02]
 562:	10 27       	eor	r17, r16
    andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
 564:	4f 73       	andi	r20, 0x3F	; 63
    subi    x2, 1       ;[04]
 566:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[05]
 568:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 56a:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffEven ;[07]
 56c:	a8 f6       	brcc	.-86     	; 0x518 <unstuffEven>

0000056e <didUnstuffE>:
didUnstuffE:
    lsr     x3          ;[08]
 56e:	46 95       	lsr	r20
    lsr     x3          ;[09]
 570:	46 95       	lsr	r20

00000572 <rxbit1>:
rxbit1:
    in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
 572:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;[01]
 574:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[02]
 576:	79 f0       	breq	.+30     	; 0x596 <se0>
    eor     x1, x2      ;[03]
 578:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 57a:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 57c:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 57e:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffOdd  ;[07]
 580:	98 f6       	brcc	.-90     	; 0x528 <unstuffOdd>

00000582 <didUnstuffO>:
didUnstuffO:
    subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
 582:	6b 5a       	subi	r22, 0xAB	; 171
    brcs    rxBitLoop   ;[09]
 584:	60 f3       	brcs	.-40     	; 0x55e <rxBitLoop>

    subi    cnt, 1      ;[10]
 586:	31 50       	subi	r19, 0x01	; 1
    in      x1, USBIN   ;[00] [11] <-- sample bit 6
 588:	09 b1       	in	r16, 0x09	; 9
    brcc    rxByteLoop  ;[01]
 58a:	b0 f6       	brcc	.-84     	; 0x538 <rxByteLoop>
    rjmp    overflow
 58c:	00 c0       	rjmp	.+0      	; 0x58e <overflow>

0000058e <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 58e:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 590:	1c bb       	out	0x1c, r17	; 28

00000592 <ignorePacket>:
ignorePacket:
    clr     token
 592:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 594:	19 c0       	rjmp	.+50     	; 0x5c8 <handleSetupOrOut>

00000596 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 596:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 598:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 59a:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 59c:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 59e:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 5a0:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 5a2:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 5a4:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 5a6:	09 f1       	breq	.+66     	; 0x5ea <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 5a8:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 5aa:	f9 f0       	breq	.+62     	; 0x5ea <handleData>
    lds     shift, usbDeviceAddr;[17]
 5ac:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 5b0:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 5b2:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 5b4:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 5b6:	ed cf       	rjmp	.-38     	; 0x592 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 5b8:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 5ba:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 5bc:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 5be:	51 f1       	breq	.+84     	; 0x614 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 5c0:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 5c2:	11 f0       	breq	.+4      	; 0x5c8 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 5c4:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 5c6:	29 f7       	brne	.-54     	; 0x592 <ignorePacket>

000005c8 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 5c8:	00 93 25 01 	sts	0x0125, r16	; 0x800125 <usbCurrentTok>

000005cc <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 5cc:	3f 91       	pop	r19
 5ce:	5f 91       	pop	r21
 5d0:	4f 91       	pop	r20
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	2f 91       	pop	r18
 5d8:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
 5da:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 5dc:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 5de:	65 cf       	rjmp	.-310    	; 0x4aa <waitForJ>

000005e0 <sofError>:
sofError:
    POP_RETI                    ;macro call
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	cf bf       	out	0x3f, r28	; 63
 5e6:	cf 91       	pop	r28
    reti
 5e8:	18 95       	reti

000005ea <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 5ea:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <usbCurrentTok>
    tst     shift               ;[20]
 5ee:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 5f0:	69 f3       	breq	.-38     	; 0x5cc <doReturn>
    lds     x2, usbRxLen        ;[22]
 5f2:	10 91 23 01 	lds	r17, 0x0123	; 0x800123 <usbRxLen>
    tst     x2                  ;[24]
 5f6:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 5f8:	91 f5       	brne	.+100    	; 0x65e <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 5fa:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 5fc:	92 f1       	brmi	.+100    	; 0x662 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 5fe:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 602:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 606:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 60a:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 60c:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 60e:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 612:	27 c0       	rjmp	.+78     	; 0x662 <sendAckAndReti>

00000614 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 614:	00 91 23 01 	lds	r16, 0x0123	; 0x800123 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 618:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 61a:	0c f5       	brge	.+66     	; 0x65e <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 61c:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 61e:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 620:	49 f4       	brne	.+18     	; 0x634 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 622:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 626:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 628:	1d c0       	rjmp	.+58     	; 0x664 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 62a:	00 93 01 01 	sts	0x0101, r16	; 0x800101 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 62e:	c7 e0       	ldi	r28, 0x07	; 7
    ldi     YH, hi8(usbTxBuf)   ;[44]
 630:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 632:	1c c0       	rjmp	.+56     	; 0x66c <usbSendAndReti>

00000634 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 634:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 638:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 63a:	14 c0       	rjmp	.+40     	; 0x664 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 63c:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 640:	c3 e1       	ldi	r28, 0x13	; 19
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 642:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 644:	13 c0       	rjmp	.+38     	; 0x66c <usbSendAndReti>

00000646 <bitstuffN>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuffN:
    eor     x1, x4          ;[5]
 646:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 648:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[7]
 64a:	00 c0       	rjmp	.+0      	; 0x64c <bitstuffN+0x6>
    nop                     ;[9]
 64c:	00 00       	nop
    out     USBOUT, x1      ;[10] <-- out
 64e:	0b b9       	out	0x0b, r16	; 11
    rjmp    didStuffN       ;[0]
 650:	1a c0       	rjmp	.+52     	; 0x686 <didStuffN>

00000652 <bitstuff6>:
    
bitstuff6:
    eor     x1, x4          ;[5]
 652:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6] Carry is zero due to brcc
 654:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[7] compensate for ror shift at branch destination
 656:	22 1f       	adc	r18, r18
    rjmp    didStuff6       ;[8]
 658:	1d c0       	rjmp	.+58     	; 0x694 <didStuff6>

0000065a <bitstuff7>:

bitstuff7:
    ldi     x2, 0           ;[2] Carry is zero due to brcc
 65a:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff7       ;[3]
 65c:	21 c0       	rjmp	.+66     	; 0x6a0 <didStuff7>

0000065e <sendNakAndReti>:


sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
 65e:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
 660:	02 c0       	rjmp	.+4      	; 0x666 <sendX3AndReti>

00000662 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 662:	32 ed       	ldi	r19, 0xD2	; 210

00000664 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
 664:	43 2f       	mov	r20, r19

00000666 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
 666:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
 668:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 66a:	32 e0       	ldi	r19, 0x02	; 2

0000066c <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 66c:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK     ;[-11]
 66e:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 670:	5c 9a       	sbi	0x0b, 4	; 11
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 672:	0b b1       	in	r16, 0x0b	; 11
    out     USBDDR, x2      ;[-7] <- acquire bus
 674:	1a b9       	out	0x0a, r17	; 10
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 676:	54 e1       	ldi	r21, 0x14	; 20
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 678:	20 e8       	ldi	r18, 0x80	; 128

0000067a <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
 67a:	65 e3       	ldi	r22, 0x35	; 53

0000067c <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [7]
 67c:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [8]
 67e:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [9] <-- out N
 680:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0] [10]
 682:	27 95       	ror	r18
    ror     x2              ;[1]
 684:	17 95       	ror	r17

00000686 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 686:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 688:	f0 f6       	brcc	.-68     	; 0x646 <bitstuffN>
    lsr     bitcnt          ;[4]
 68a:	66 95       	lsr	r22
    brcc    txBitLoop       ;[5]
 68c:	b8 f7       	brcc	.-18     	; 0x67c <txBitLoop>
    brne    txBitLoop       ;[6]
 68e:	b1 f7       	brne	.-20     	; 0x67c <txBitLoop>

    sbrs    shift, 0        ;[7]
 690:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 692:	05 27       	eor	r16, r21

00000694 <didStuff6>:
didStuff6:
    out     USBOUT, x1      ;[-1] [9] <-- out 6
 694:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0] [10]
 696:	27 95       	ror	r18
    ror     x2              ;[1]
 698:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[2]
 69a:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff6       ;[3]
 69c:	d0 f6       	brcc	.-76     	; 0x652 <bitstuff6>
    ror     shift           ;[4]
 69e:	27 95       	ror	r18

000006a0 <didStuff7>:
didStuff7:
    ror     x2              ;[5]
 6a0:	17 95       	ror	r17
    sbrs    x2, 7           ;[6]
 6a2:	17 ff       	sbrs	r17, 7
    eor     x1, x4          ;[7]
 6a4:	05 27       	eor	r16, r21
    nop                     ;[8]
 6a6:	00 00       	nop
    cpi     x2, 0xfc        ;[9]
 6a8:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;[-1][10] <-- out 7
 6aa:	0b b9       	out	0x0b, r16	; 11
    brcc    bitstuff7       ;[0] [11]
 6ac:	b0 f6       	brcc	.-84     	; 0x65a <bitstuff7>
    ld      shift, y+       ;[1]
 6ae:	29 91       	ld	r18, Y+
    dec     cnt             ;[3]
 6b0:	3a 95       	dec	r19
    brne    txByteLoop      ;[4]
 6b2:	19 f7       	brne	.-58     	; 0x67a <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 6b4:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[6]
 6b6:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <usbNewDeviceAddr>
    lsl     x2              ;[8] we compare with left shifted address
 6ba:	11 0f       	add	r17, r17
    subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
 6bc:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[10]
 6be:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 6c0:	0b b9       	out	0x0b, r16	; 11
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[0]
 6c2:	11 f0       	breq	.+4      	; 0x6c8 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 6c4:	10 93 1e 01 	sts	0x011E, r17	; 0x80011e <usbDeviceAddr>

000006c8 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
 6c8:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)   ;[3]
 6ca:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     ;[4]
 6cc:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR      ;[5]
 6ce:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK     ;[6] set both pins to input
 6d0:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1          ;[7]
 6d2:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[8] configure no pullup on both pins
 6d4:	4b 7e       	andi	r20, 0xEB	; 235
    ldi     x4, 4           ;[9]
 6d6:	54 e0       	ldi	r21, 0x04	; 4

000006d8 <se0Delay>:
se0Delay:
    dec     x4              ;[10] [13] [16] [19]
 6d8:	5a 95       	dec	r21
    brne    se0Delay        ;[11] [14] [17] [20]
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <se0Delay>
    out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
 6dc:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2      ;[22] <-- release bus now
 6de:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
 6e0:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 6e2:	74 cf       	rjmp	.-280    	; 0x5cc <doReturn>

000006e4 <main>:
#define BTN_OUT  PORTD

int main(void)
{
	uint8_t state = 0;
	usb_kbd_init();
 6e4:	0e 94 ab 00 	call	0x156	; 0x156 <usb_kbd_init>

	/* Enable internal pullup */
	BTN_OUT |= (1 << BTN_PIN);
 6e8:	5f 9a       	sbi	0x0b, 7	; 11
	DDRB |= (1 << 5);
 6ea:	25 9a       	sbi	0x04, 5	; 4
	uint8_t state = 0;
 6ec:	c0 e0       	ldi	r28, 0x00	; 0

	while(1)
	{
		usb_kbd_update();
 6ee:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <usb_kbd_update>
		if(!(BTN_IN & (1 << BTN_PIN)) && state == 0)
 6f2:	4f 99       	sbic	0x09, 7	; 9
 6f4:	3e c0       	rjmp	.+124    	; 0x772 <main+0x8e>
 6f6:	c1 11       	cpse	r28, r1
 6f8:	3c c0       	rjmp	.+120    	; 0x772 <main+0x8e>
		{
			/* Print "Hello World!" */
			usb_kbd_send(KEY_H, MOD_SHIFT_LEFT);
 6fa:	62 e0       	ldi	r22, 0x02	; 2
 6fc:	8b e0       	ldi	r24, 0x0B	; 11
 6fe:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
			usb_kbd_send(KEY_E, 0);
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	88 e0       	ldi	r24, 0x08	; 8
 706:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
			usb_kbd_send(KEY_L, 0);
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	8f e0       	ldi	r24, 0x0F	; 15
 70e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
			usb_kbd_send(KEY_L, 0);
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	8f e0       	ldi	r24, 0x0F	; 15
 716:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
			usb_kbd_send(KEY_O, 0);
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	82 e1       	ldi	r24, 0x12	; 18
 71e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
			usb_kbd_send(KEY_SPACE, 0);
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	8c e2       	ldi	r24, 0x2C	; 44
 726:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
			usb_kbd_send(KEY_W, MOD_SHIFT_LEFT);
 72a:	62 e0       	ldi	r22, 0x02	; 2
 72c:	8a e1       	ldi	r24, 0x1A	; 26
 72e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
			usb_kbd_send(KEY_O, 0);
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	82 e1       	ldi	r24, 0x12	; 18
 736:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
			usb_kbd_send(KEY_R, 0);
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	85 e1       	ldi	r24, 0x15	; 21
 73e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
			usb_kbd_send(KEY_L, 0);
 742:	60 e0       	ldi	r22, 0x00	; 0
 744:	8f e0       	ldi	r24, 0x0F	; 15
 746:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
			usb_kbd_send(KEY_D, 0);
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	87 e0       	ldi	r24, 0x07	; 7
 74e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>

			/* Exclamation mark */
			usb_kbd_send(KEY_1, MOD_SHIFT_LEFT);
 752:	62 e0       	ldi	r22, 0x02	; 2
 754:	8e e1       	ldi	r24, 0x1E	; 30
 756:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
			usb_kbd_send(KEY_ENTER, 0);
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	88 e2       	ldi	r24, 0x28	; 40
 75e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usb_kbd_send>
 762:	8f e3       	ldi	r24, 0x3F	; 63
 764:	9c e9       	ldi	r25, 0x9C	; 156
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	f1 f7       	brne	.-4      	; 0x766 <main+0x82>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <main+0x88>
 76c:	00 00       	nop

			state = 1;
 76e:	c1 e0       	ldi	r28, 0x01	; 1
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
 770:	be cf       	rjmp	.-132    	; 0x6ee <main+0xa>

			/* Debouncing */
			_delay_ms(10);
		}
		else if((BTN_IN & (1 << BTN_PIN)) && state == 1)
 772:	4f 9b       	sbis	0x09, 7	; 9
 774:	bc cf       	rjmp	.-136    	; 0x6ee <main+0xa>
 776:	c1 30       	cpi	r28, 0x01	; 1
 778:	09 f0       	breq	.+2      	; 0x77c <main+0x98>
 77a:	b9 cf       	rjmp	.-142    	; 0x6ee <main+0xa>
	__builtin_avr_delay_cycles(__ticks_dc);
 77c:	8f e3       	ldi	r24, 0x3F	; 63
 77e:	9c e9       	ldi	r25, 0x9C	; 156
 780:	01 97       	sbiw	r24, 0x01	; 1
 782:	f1 f7       	brne	.-4      	; 0x780 <main+0x9c>
 784:	00 c0       	rjmp	.+0      	; 0x786 <main+0xa2>
 786:	00 00       	nop
 788:	b1 cf       	rjmp	.-158    	; 0x6ec <main+0x8>

0000078a <_exit>:
 78a:	f8 94       	cli

0000078c <__stop_program>:
 78c:	ff cf       	rjmp	.-2      	; 0x78c <__stop_program>
