   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB7:
  15               		.file 1 "main.c"
   1:main.c        **** #include "usb_kbd.h"
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** 
   4:main.c        **** #define BTN_PIN 7
   5:main.c        **** #define BTN_IN   PIND
   6:main.c        **** #define BTN_OUT  PORTD
   7:main.c        **** 
   8:main.c        **** int main(void)
   9:main.c        **** {
  16               		.loc 1 9 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  10:main.c        **** 	uint8_t state = 0;
  22               		.loc 1 10 2 view .LVU1
  23               	.LVL0:
  11:main.c        **** 	usb_kbd_init();
  24               		.loc 1 11 2 view .LVU2
  25 0000 0E94 0000 		call usb_kbd_init
  26               	.LVL1:
  12:main.c        **** 
  13:main.c        **** 	/* Enable internal pullup */
  14:main.c        **** 	BTN_OUT |= (1 << BTN_PIN);
  27               		.loc 1 14 2 view .LVU3
  28               		.loc 1 14 10 is_stmt 0 view .LVU4
  29 0004 5F9A      		sbi 0xb,7
  15:main.c        **** 	DDRB |= (1 << 5);
  30               		.loc 1 15 2 is_stmt 1 view .LVU5
  31               		.loc 1 15 7 is_stmt 0 view .LVU6
  32 0006 259A      		sbi 0x4,5
  33               	.L5:
  10:main.c        **** 	usb_kbd_init();
  34               		.loc 1 10 10 view .LVU7
  35 0008 C0E0      		ldi r28,0
  36               	.LVL2:
  37               	.L2:
  16:main.c        **** 
  17:main.c        **** 	while(1)
  38               		.loc 1 17 2 is_stmt 1 view .LVU8
  18:main.c        **** 	{
  19:main.c        **** 		usb_kbd_update();
  39               		.loc 1 19 3 view .LVU9
  40 000a 0E94 0000 		call usb_kbd_update
  41               	.LVL3:
  20:main.c        **** 		if(!(BTN_IN & (1 << BTN_PIN)) && state == 0)
  42               		.loc 1 20 3 view .LVU10
  43               		.loc 1 20 5 is_stmt 0 view .LVU11
  44 000e 4F99      		sbic 0x9,7
  45 0010 00C0      		rjmp .L3
  46               		.loc 1 20 33 discriminator 1 view .LVU12
  47 0012 C111      		cpse r28,__zero_reg__
  48 0014 00C0      		rjmp .L3
  21:main.c        **** 		{
  22:main.c        **** 			/* Print "Hello World!" */
  23:main.c        **** 			usb_kbd_send(KEY_H, MOD_SHIFT_LEFT);
  49               		.loc 1 23 4 is_stmt 1 view .LVU13
  50 0016 62E0      		ldi r22,lo8(2)
  51 0018 8BE0      		ldi r24,lo8(11)
  52 001a 0E94 0000 		call usb_kbd_send
  53               	.LVL4:
  24:main.c        **** 			usb_kbd_send(KEY_E, 0);
  54               		.loc 1 24 4 view .LVU14
  55 001e 60E0      		ldi r22,0
  56 0020 88E0      		ldi r24,lo8(8)
  57 0022 0E94 0000 		call usb_kbd_send
  58               	.LVL5:
  25:main.c        **** 			usb_kbd_send(KEY_L, 0);
  59               		.loc 1 25 4 view .LVU15
  60 0026 60E0      		ldi r22,0
  61 0028 8FE0      		ldi r24,lo8(15)
  62 002a 0E94 0000 		call usb_kbd_send
  63               	.LVL6:
  26:main.c        **** 			usb_kbd_send(KEY_L, 0);
  64               		.loc 1 26 4 view .LVU16
  65 002e 60E0      		ldi r22,0
  66 0030 8FE0      		ldi r24,lo8(15)
  67 0032 0E94 0000 		call usb_kbd_send
  68               	.LVL7:
  27:main.c        **** 			usb_kbd_send(KEY_O, 0);
  69               		.loc 1 27 4 view .LVU17
  70 0036 60E0      		ldi r22,0
  71 0038 82E1      		ldi r24,lo8(18)
  72 003a 0E94 0000 		call usb_kbd_send
  73               	.LVL8:
  28:main.c        **** 			usb_kbd_send(KEY_SPACE, 0);
  74               		.loc 1 28 4 view .LVU18
  75 003e 60E0      		ldi r22,0
  76 0040 8CE2      		ldi r24,lo8(44)
  77 0042 0E94 0000 		call usb_kbd_send
  78               	.LVL9:
  29:main.c        **** 			usb_kbd_send(KEY_W, MOD_SHIFT_LEFT);
  79               		.loc 1 29 4 view .LVU19
  80 0046 62E0      		ldi r22,lo8(2)
  81 0048 8AE1      		ldi r24,lo8(26)
  82 004a 0E94 0000 		call usb_kbd_send
  83               	.LVL10:
  30:main.c        **** 			usb_kbd_send(KEY_O, 0);
  84               		.loc 1 30 4 view .LVU20
  85 004e 60E0      		ldi r22,0
  86 0050 82E1      		ldi r24,lo8(18)
  87 0052 0E94 0000 		call usb_kbd_send
  88               	.LVL11:
  31:main.c        **** 			usb_kbd_send(KEY_R, 0);
  89               		.loc 1 31 4 view .LVU21
  90 0056 60E0      		ldi r22,0
  91 0058 85E1      		ldi r24,lo8(21)
  92 005a 0E94 0000 		call usb_kbd_send
  93               	.LVL12:
  32:main.c        **** 			usb_kbd_send(KEY_L, 0);
  94               		.loc 1 32 4 view .LVU22
  95 005e 60E0      		ldi r22,0
  96 0060 8FE0      		ldi r24,lo8(15)
  97 0062 0E94 0000 		call usb_kbd_send
  98               	.LVL13:
  33:main.c        **** 			usb_kbd_send(KEY_D, 0);
  99               		.loc 1 33 4 view .LVU23
 100 0066 60E0      		ldi r22,0
 101 0068 87E0      		ldi r24,lo8(7)
 102 006a 0E94 0000 		call usb_kbd_send
 103               	.LVL14:
  34:main.c        **** 
  35:main.c        **** 			/* Exclamation mark */
  36:main.c        **** 			usb_kbd_send(KEY_1, MOD_SHIFT_LEFT);
 104               		.loc 1 36 4 view .LVU24
 105 006e 62E0      		ldi r22,lo8(2)
 106 0070 8EE1      		ldi r24,lo8(30)
 107 0072 0E94 0000 		call usb_kbd_send
 108               	.LVL15:
  37:main.c        **** 			usb_kbd_send(KEY_ENTER, 0);
 109               		.loc 1 37 4 view .LVU25
 110 0076 60E0      		ldi r22,0
 111 0078 88E2      		ldi r24,lo8(40)
 112 007a 0E94 0000 		call usb_kbd_send
 113               	.LVL16:
  38:main.c        **** 
  39:main.c        **** 			state = 1;
 114               		.loc 1 39 4 view .LVU26
  40:main.c        **** 
  41:main.c        **** 			/* Debouncing */
  42:main.c        **** 			_delay_ms(10);
 115               		.loc 1 42 4 view .LVU27
 116               	.LBB6:
 117               	.LBI6:
 118               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 119               		.loc 2 166 1 view .LVU28
 120               	.LBB7:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 121               		.loc 2 168 2 view .LVU29
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 122               		.loc 2 172 2 view .LVU30
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 123               		.loc 2 173 2 view .LVU31
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 124               		.loc 2 174 2 view .LVU32
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 125               		.loc 2 184 3 view .LVU33
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 126               		.loc 2 187 2 view .LVU34
 127 007e 8FE3      		ldi r24,lo8(-25537)
 128 0080 9CE9      		ldi r25,hi8(-25537)
 129 0082 0197      	1:	sbiw r24,1
 130 0084 01F4      		brne 1b
 131 0086 00C0      		rjmp .
 132 0088 0000      		nop
 133               	.LBE7:
 134               	.LBE6:
  39:main.c        **** 
 135               		.loc 1 39 10 is_stmt 0 view .LVU35
 136 008a C1E0      		ldi r28,lo8(1)
 137               	.LBB9:
 138               	.LBB8:
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 139               		.loc 2 210 1 view .LVU36
 140 008c 00C0      		rjmp .L2
 141               	.LVL17:
 142               	.L3:
 143               		.loc 2 210 1 view .LVU37
 144               	.LBE8:
 145               	.LBE9:
  43:main.c        **** 		}
  44:main.c        **** 		else if((BTN_IN & (1 << BTN_PIN)) && state == 1)
 146               		.loc 1 44 8 is_stmt 1 view .LVU38
 147               		.loc 1 44 10 is_stmt 0 view .LVU39
 148 008e 4F9B      		sbis 0x9,7
 149 0090 00C0      		rjmp .L2
 150               		.loc 1 44 37 discriminator 1 view .LVU40
 151 0092 C130      		cpi r28,lo8(1)
 152 0094 01F0      		breq .+2
 153 0096 00C0      		rjmp .L2
  45:main.c        **** 		{
  46:main.c        **** 			state = 0;
 154               		.loc 1 46 4 is_stmt 1 view .LVU41
 155               	.LVL18:
  47:main.c        **** 
  48:main.c        **** 			/* Debouncing */
  49:main.c        **** 			_delay_ms(10);
 156               		.loc 1 49 4 view .LVU42
 157               	.LBB10:
 158               	.LBI10:
 166:/usr/avr/include/util/delay.h **** {
 159               		.loc 2 166 1 view .LVU43
 160               	.LBB11:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 161               		.loc 2 168 2 view .LVU44
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 162               		.loc 2 172 2 view .LVU45
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 163               		.loc 2 173 2 view .LVU46
 174:/usr/avr/include/util/delay.h **** 
 164               		.loc 2 174 2 view .LVU47
 184:/usr/avr/include/util/delay.h **** 	#endif
 165               		.loc 2 184 3 view .LVU48
 187:/usr/avr/include/util/delay.h **** 
 166               		.loc 2 187 2 view .LVU49
 167 0098 8FE3      		ldi r24,lo8(-25537)
 168 009a 9CE9      		ldi r25,hi8(-25537)
 169 009c 0197      	1:	sbiw r24,1
 170 009e 01F4      		brne 1b
 171 00a0 00C0      		rjmp .
 172 00a2 0000      		nop
 173 00a4 00C0      		rjmp .L5
 174               	.LBE11:
 175               	.LBE10:
 176               		.cfi_endproc
 177               	.LFE7:
 179               		.text
 180               	.Letext0:
 181               		.file 3 "/usr/avr/include/stdint.h"
 182               		.file 4 "usbdrv.h"
 183               		.file 5 "usb_kbd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccUSqQlG.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccUSqQlG.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccUSqQlG.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccUSqQlG.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccUSqQlG.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccUSqQlG.s:13     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
usb_kbd_init
usb_kbd_update
usb_kbd_send
