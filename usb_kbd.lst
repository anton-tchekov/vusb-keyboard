   1               		.file	"usb_kbd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	usb_kbd_init
  12               	usb_kbd_init:
  13               	.LFB7:
  14               		.file 1 "usb_kbd.c"
   1:usb_kbd.c     **** #include "usb_kbd.h"
   2:usb_kbd.c     **** #include <util/delay.h>
   3:usb_kbd.c     **** 
   4:usb_kbd.c     **** #ifdef BLA
   5:usb_kbd.c     **** const char usbHidReportDescriptor[35] PROGMEM =
   6:usb_kbd.c     **** {
   7:usb_kbd.c     **** 	0x05, 0x01, /* USAGE_PAGE */
   8:usb_kbd.c     **** 	0x09, 0x06, /* USAGE */
   9:usb_kbd.c     **** 	0xa1, 0x01, /* COLLECTION */
  10:usb_kbd.c     **** 	0x05, 0x07, /* USAGE_PAGE */
  11:usb_kbd.c     **** 	0x19, 0xe0, /* USAGE_MINIMUM */
  12:usb_kbd.c     **** 	0x29, 0xe7, /* USAGE_MAXIMUM */
  13:usb_kbd.c     **** 	0x15, 0x00, /* LOGICAL_MINIMUM */
  14:usb_kbd.c     **** 	0x25, 0x01, /* LOGICAL_MAXIMUM */
  15:usb_kbd.c     **** 	0x75, 0x01, /* REPORT_SIZE */
  16:usb_kbd.c     **** 	0x95, 0x08, /* REPORT_COUNT */
  17:usb_kbd.c     **** 	0x81, 0x02, /* INPUT */
  18:usb_kbd.c     **** 	0x95, BUFFER_SIZE - 1, /* REPORT_COUNT */
  19:usb_kbd.c     **** 	0x75, 0x08, /* REPORT_SIZE */
  20:usb_kbd.c     **** 	0x25, 0x65, /* LOGICAL_MAXIMUM */
  21:usb_kbd.c     **** 	0x19, 0x00, /* USAGE_MINIMUM */
  22:usb_kbd.c     **** 	0x29, 0x65, /* USAGE_MAXIMUM */
  23:usb_kbd.c     **** 	0x81, 0x00, /* INPUT */
  24:usb_kbd.c     **** 	0xc0 /* END_COLLECTION */
  25:usb_kbd.c     **** };
  26:usb_kbd.c     **** #endif
  27:usb_kbd.c     **** 
  28:usb_kbd.c     **** const char usbHidReportDescriptor[] PROGMEM = {
  29:usb_kbd.c     ****     0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
  30:usb_kbd.c     ****     0x09, 0x06,                    // USAGE (Keyboard)
  31:usb_kbd.c     ****     0xa1, 0x01,                    // COLLECTION (Application)
  32:usb_kbd.c     ****     0x75, 0x01,                    //   REPORT_SIZE (1)
  33:usb_kbd.c     ****     0x95, 0x08,                    //   REPORT_COUNT (8)
  34:usb_kbd.c     ****     0x05, 0x07,                    //   USAGE_PAGE (Keyboard)(Key Codes)
  35:usb_kbd.c     ****     0x19, 0xe0,                    //   USAGE_MINIMUM (Keyboard LeftControl)(224)
  36:usb_kbd.c     ****     0x29, 0xe7,                    //   USAGE_MAXIMUM (Keyboard Right GUI)(231)
  37:usb_kbd.c     ****     0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
  38:usb_kbd.c     ****     0x25, 0x01,                    //   LOGICAL_MAXIMUM (1)
  39:usb_kbd.c     ****     0x81, 0x02,                    //   INPUT (Data,Var,Abs) ; Modifier byte
  40:usb_kbd.c     ****     0x95, 0x01,                    //   REPORT_COUNT (1)
  41:usb_kbd.c     ****     0x75, 0x08,                    //   REPORT_SIZE (8)
  42:usb_kbd.c     ****     0x81, 0x03,                    //   INPUT (Cnst,Var,Abs) ; Reserved byte
  43:usb_kbd.c     ****     0x95, 0x05,                    //   REPORT_COUNT (5)
  44:usb_kbd.c     ****     0x75, 0x01,                    //   REPORT_SIZE (1)
  45:usb_kbd.c     ****     0x05, 0x08,                    //   USAGE_PAGE (LEDs)
  46:usb_kbd.c     ****     0x19, 0x01,                    //   USAGE_MINIMUM (Num Lock)
  47:usb_kbd.c     ****     0x29, 0x05,                    //   USAGE_MAXIMUM (Kana)
  48:usb_kbd.c     ****     0x91, 0x02,                    //   OUTPUT (Data,Var,Abs) ; LED report
  49:usb_kbd.c     ****     0x95, 0x01,                    //   REPORT_COUNT (1)
  50:usb_kbd.c     ****     0x75, 0x03,                    //   REPORT_SIZE (3)
  51:usb_kbd.c     ****     0x91, 0x03,                    //   OUTPUT (Cnst,Var,Abs) ; LED report padding
  52:usb_kbd.c     ****     0x95, 0x06,                    //   REPORT_COUNT (6)
  53:usb_kbd.c     ****     0x75, 0x08,                    //   REPORT_SIZE (8)
  54:usb_kbd.c     ****     0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
  55:usb_kbd.c     ****     0x25, 0x65,                    //   LOGICAL_MAXIMUM (101)
  56:usb_kbd.c     ****     0x05, 0x07,                    //   USAGE_PAGE (Keyboard)(Key Codes)
  57:usb_kbd.c     ****     0x19, 0x00,                    //   USAGE_MINIMUM (Reserved (no event indicated))(0)
  58:usb_kbd.c     ****     0x29, 0x65,                    //   USAGE_MAXIMUM (Keyboard Application)(101)
  59:usb_kbd.c     ****     0x81, 0x00,                    //   INPUT (Data,Ary,Abs)
  60:usb_kbd.c     ****     0xc0                           // END_COLLECTION
  61:usb_kbd.c     **** };
  62:usb_kbd.c     **** 
  63:usb_kbd.c     **** uint8_t report[BUFFER_SIZE];
  64:usb_kbd.c     **** 
  65:usb_kbd.c     **** void usb_kbd_init(void)
  66:usb_kbd.c     **** {
  15               		.loc 1 66 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  67:usb_kbd.c     **** 	PORTD = 0;
  21               		.loc 1 67 2 view .LVU1
  22               		.loc 1 67 8 is_stmt 0 view .LVU2
  23 0000 1BB8      		out 0xb,__zero_reg__
  68:usb_kbd.c     **** 	DDRD |= ~USBMASK;
  24               		.loc 1 68 2 is_stmt 1 view .LVU3
  25               		.loc 1 68 7 is_stmt 0 view .LVU4
  26 0002 8AB1      		in r24,0xa
  27 0004 8B6E      		ori r24,lo8(-21)
  28 0006 8AB9      		out 0xa,r24
  69:usb_kbd.c     **** 	asm volatile("cli");
  29               		.loc 1 69 2 is_stmt 1 view .LVU5
  30               	/* #APP */
  31               	 ;  69 "usb_kbd.c" 1
  32 0008 F894      		cli
  33               	 ;  0 "" 2
  70:usb_kbd.c     **** 	usbDeviceDisconnect();
  34               		.loc 1 70 2 view .LVU6
  35               	/* #NOAPP */
  36 000a 5598      		cbi 0xa,5
  37 000c 5D98      		cbi 0xb,5
  71:usb_kbd.c     **** 	usbDeviceConnect();
  38               		.loc 1 71 2 view .LVU7
  39 000e 559A      		sbi 0xa,5
  40 0010 5D9A      		sbi 0xb,5
  72:usb_kbd.c     **** 	usbInit();
  41               		.loc 1 72 2 view .LVU8
  42 0012 0E94 0000 		call usbInit
  43               	.LVL0:
  73:usb_kbd.c     **** 	asm volatile("sei");
  44               		.loc 1 73 2 view .LVU9
  45               	/* #APP */
  46               	 ;  73 "usb_kbd.c" 1
  47 0016 7894      		sei
  48               	 ;  0 "" 2
  74:usb_kbd.c     **** 	memset(report, 0, sizeof(report));
  49               		.loc 1 74 2 view .LVU10
  50               	/* #NOAPP */
  51 0018 E0E0      		ldi r30,lo8(report)
  52 001a F0E0      		ldi r31,hi8(report)
  53 001c 84E0      		ldi r24,lo8(4)
  54 001e DF01      		movw r26,r30
  55               		0:
  56 0020 1D92      		st X+,__zero_reg__
  57 0022 8A95      		dec r24
  58 0024 01F4      		brne 0b
  75:usb_kbd.c     **** 	usbSetInterrupt(report, sizeof(report));
  59               		.loc 1 75 2 view .LVU11
  60 0026 64E0      		ldi r22,lo8(4)
  61 0028 CF01      		movw r24,r30
  62 002a 0E94 0000 		call usbSetInterrupt
  63               	.LVL1:
  76:usb_kbd.c     **** 	usbDeviceDisconnect();
  64               		.loc 1 76 2 view .LVU12
  65 002e 5598      		cbi 0xa,5
  66 0030 5D98      		cbi 0xb,5
  77:usb_kbd.c     **** 	_delay_ms(250);
  67               		.loc 1 77 2 view .LVU13
  68               	.LVL2:
  69               	.LBB4:
  70               	.LBI4:
  71               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
  72               		.loc 2 166 1 view .LVU14
  73               	.LBB5:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
  74               		.loc 2 168 2 view .LVU15
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
  75               		.loc 2 172 2 view .LVU16
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
  76               		.loc 2 173 2 view .LVU17
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
  77               		.loc 2 174 2 view .LVU18
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
  78               		.loc 2 184 3 view .LVU19
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  79               		.loc 2 187 2 view .LVU20
  80 0032 BFEF      		ldi r27,lo8(799999)
  81 0034 24E3      		ldi r18,hi8(799999)
  82 0036 8CE0      		ldi r24,hlo8(799999)
  83 0038 B150      	1:	subi r27,1
  84 003a 2040      		sbci r18,0
  85 003c 8040      		sbci r24,0
  86 003e 01F4      		brne 1b
  87 0040 00C0      		rjmp .
  88 0042 0000      		nop
  89               	.LVL3:
  90               		.loc 2 187 2 is_stmt 0 view .LVU21
  91               	.LBE5:
  92               	.LBE4:
  78:usb_kbd.c     **** 	usbDeviceConnect();
  93               		.loc 1 78 2 is_stmt 1 view .LVU22
  94 0044 559A      		sbi 0xa,5
  95 0046 5D9A      		sbi 0xb,5
  96               	/* epilogue start */
  79:usb_kbd.c     **** }
  97               		.loc 1 79 1 is_stmt 0 view .LVU23
  98 0048 0895      		ret
  99               		.cfi_endproc
 100               	.LFE7:
 102               	.global	usb_kbd_update
 104               	usb_kbd_update:
 105               	.LFB8:
  80:usb_kbd.c     **** 
  81:usb_kbd.c     **** void usb_kbd_update(void)
  82:usb_kbd.c     **** {
 106               		.loc 1 82 1 is_stmt 1 view -0
 107               		.cfi_startproc
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 0 */
 111               	.L__stack_usage = 0
  83:usb_kbd.c     **** 	usbPoll();
 112               		.loc 1 83 2 view .LVU25
 113 004a 0C94 0000 		jmp usbPoll
 114               	.LVL4:
 115               		.cfi_endproc
 116               	.LFE8:
 118               	.global	usb_kbd_send
 120               	usb_kbd_send:
 121               	.LFB9:
  84:usb_kbd.c     **** }
  85:usb_kbd.c     **** 
  86:usb_kbd.c     **** void usb_kbd_send(uint8_t key, uint8_t modifiers)
  87:usb_kbd.c     **** {
 122               		.loc 1 87 1 view -0
 123               		.cfi_startproc
 124               	/* prologue: function */
 125               	/* frame size = 0 */
 126               	/* stack size = 0 */
 127               	.L__stack_usage = 0
 128               	.LVL5:
 129               	.L4:
  88:usb_kbd.c     **** 	while(!usbInterruptIsReady()) ;
 130               		.loc 1 88 32 discriminator 1 view .LVU27
 131               		.loc 1 88 7 discriminator 1 view .LVU28
 132               		.loc 1 88 9 is_stmt 0 discriminator 1 view .LVU29
 133 004e 9091 0000 		lds r25,usbTxStatus1
 134               		.loc 1 88 7 discriminator 1 view .LVU30
 135 0052 94FF      		sbrs r25,4
 136 0054 00C0      		rjmp .L4
  89:usb_kbd.c     **** 	memset(report, 0, sizeof(report));
 137               		.loc 1 89 2 is_stmt 1 view .LVU31
 138 0056 1092 0000 		sts report+2+1,__zero_reg__
 139 005a 1092 0000 		sts report+2,__zero_reg__
  90:usb_kbd.c     **** 	report[0] = modifiers;
 140               		.loc 1 90 2 view .LVU32
 141               		.loc 1 90 12 is_stmt 0 view .LVU33
 142 005e 6093 0000 		sts report,r22
  91:usb_kbd.c     **** 	report[1] = key;
 143               		.loc 1 91 2 is_stmt 1 view .LVU34
 144               		.loc 1 91 12 is_stmt 0 view .LVU35
 145 0062 8093 0000 		sts report+1,r24
  92:usb_kbd.c     **** 	usbSetInterrupt(report, sizeof(report));
 146               		.loc 1 92 2 is_stmt 1 view .LVU36
 147 0066 64E0      		ldi r22,lo8(4)
 148               	.LVL6:
 149               		.loc 1 92 2 is_stmt 0 view .LVU37
 150 0068 80E0      		ldi r24,lo8(report)
 151 006a 90E0      		ldi r25,hi8(report)
 152               	.LVL7:
 153               		.loc 1 92 2 view .LVU38
 154 006c 0E94 0000 		call usbSetInterrupt
 155               	.LVL8:
  93:usb_kbd.c     **** 	while(!usbInterruptIsReady()) ;
 156               		.loc 1 93 2 is_stmt 1 view .LVU39
 157               	.L5:
 158               		.loc 1 93 32 discriminator 1 view .LVU40
 159               		.loc 1 93 7 discriminator 1 view .LVU41
 160               		.loc 1 93 9 is_stmt 0 discriminator 1 view .LVU42
 161 0070 8091 0000 		lds r24,usbTxStatus1
 162               		.loc 1 93 7 discriminator 1 view .LVU43
 163 0074 84FF      		sbrs r24,4
 164 0076 00C0      		rjmp .L5
  94:usb_kbd.c     **** 	memset(report, 0, sizeof(report));
 165               		.loc 1 94 2 is_stmt 1 view .LVU44
 166 0078 E0E0      		ldi r30,lo8(report)
 167 007a F0E0      		ldi r31,hi8(report)
 168 007c 84E0      		ldi r24,lo8(4)
 169 007e DF01      		movw r26,r30
 170               		0:
 171 0080 1D92      		st X+,__zero_reg__
 172 0082 8A95      		dec r24
 173 0084 01F4      		brne 0b
  95:usb_kbd.c     **** 	usbSetInterrupt(report, sizeof(report));
 174               		.loc 1 95 2 view .LVU45
 175 0086 64E0      		ldi r22,lo8(4)
 176 0088 CF01      		movw r24,r30
 177 008a 0C94 0000 		jmp usbSetInterrupt
 178               	.LVL9:
 179               		.cfi_endproc
 180               	.LFE9:
 182               	.global	usbFunctionSetup
 184               	usbFunctionSetup:
 185               	.LVL10:
 186               	.LFB10:
  96:usb_kbd.c     **** }
  97:usb_kbd.c     **** 
  98:usb_kbd.c     **** uint8_t usbFunctionSetup(uint8_t data[8]) 
  99:usb_kbd.c     **** {
 187               		.loc 1 99 1 view -0
 188               		.cfi_startproc
 189               	/* prologue: function */
 190               	/* frame size = 0 */
 191               	/* stack size = 0 */
 192               	.L__stack_usage = 0
 100:usb_kbd.c     **** 	usbMsgPtr = report;
 193               		.loc 1 100 2 view .LVU47
 194               		.loc 1 100 12 is_stmt 0 view .LVU48
 195 008e 80E0      		ldi r24,lo8(report)
 196 0090 90E0      		ldi r25,hi8(report)
 197               	.LVL11:
 198               		.loc 1 100 12 view .LVU49
 199 0092 9093 0000 		sts usbMsgPtr+1,r25
 200 0096 8093 0000 		sts usbMsgPtr,r24
 101:usb_kbd.c     **** 	return 0;
 201               		.loc 1 101 2 is_stmt 1 view .LVU50
 102:usb_kbd.c     **** }
 202               		.loc 1 102 1 is_stmt 0 view .LVU51
 203 009a 80E0      		ldi r24,0
 204               	/* epilogue start */
 205 009c 0895      		ret
 206               		.cfi_endproc
 207               	.LFE10:
 209               		.comm	report,4,1
 210               	.global	usbDescriptorHidReport
 211               		.section	.progmem.data,"a",@progbits
 214               	usbDescriptorHidReport:
 215 0000 0501 0906 		.string	"\005\001\t\006\241\001u\001\225\b\005\007\031\340)\347\025"
 215      A101 7501 
 215      9508 0507 
 215      19E0 29E7 
 215      1500 
 216 0012 2501 8102 		.string	"%\001\201\002\225\001u\b\201\003\225\005u\001\005\b\031\001)\005\221\002\225\001u\003\221
 216      9501 7508 
 216      8103 9505 
 216      7501 0508 
 216      1901 2905 
 217 0034 2565 0507 		.string	"%e\005\007\031"
 217      1900 
 218 003a 2965 8100 		.string	")e\201"
 219 003e C0        		.ascii	"\300"
 220               		.text
 221               	.Letext0:
 222               		.file 3 "/usr/avr/include/stdint.h"
 223               		.file 4 "usbdrv.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_kbd.c
     /tmp/cc338tF4.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc338tF4.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc338tF4.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc338tF4.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc338tF4.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc338tF4.s:12     .text:0000000000000000 usb_kbd_init
                            *COM*:0000000000000004 report
     /tmp/cc338tF4.s:104    .text:000000000000004a usb_kbd_update
     /tmp/cc338tF4.s:120    .text:000000000000004e usb_kbd_send
     /tmp/cc338tF4.s:184    .text:000000000000008e usbFunctionSetup
     /tmp/cc338tF4.s:214    .progmem.data:0000000000000000 usbDescriptorHidReport

UNDEFINED SYMBOLS
usbInit
usbSetInterrupt
usbPoll
usbTxStatus1
usbMsgPtr
__do_clear_bss
