   1               	# 1 "usbdrvasm.S"
   1               	/* Name: usbdrvasm.S
   0               	
   0               	
   2               	 * Project: V-USB, virtual USB port for Atmel's(r) AVR(r) microcontrollers
   3               	 * Author: Christian Starkjohann
   4               	 * Creation Date: 2007-06-13
   5               	 * Tabsize: 4
   6               	 * Copyright: (c) 2007 by OBJECTIVE DEVELOPMENT Software GmbH
   7               	 * License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)
   8               	 * Revision: $Id: usbdrvasm.S 761 2009-08-12 16:30:23Z cs $
   9               	 */
  10               	
  11               	/*
  12               	General Description:
  13               	This module is the assembler part of the USB driver. This file contains
  14               	general code (preprocessor acrobatics and CRC computation) and then includes
  15               	the file appropriate for the given clock rate.
  16               	*/
  17               	
  18               	#define __SFR_OFFSET 0      /* used by avr-libc's register definitions */
  19               	#include "usbportability.h"
   1               	/* Name: usbportability.h
   2               	 * Project: V-USB, virtual USB port for Atmel's(r) AVR(r) microcontrollers
   3               	 * Author: Christian Starkjohann
   4               	 * Creation Date: 2008-06-17
   5               	 * Tabsize: 4
   6               	 * Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH
   7               	 * License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)
   8               	 * This Revision: $Id: usbportability.h 740 2009-04-13 18:23:31Z cs $
   9               	 */
  10               	
  11               	/*
  12               	General Description:
  13               	This header is intended to contain all (or at least most of) the compiler
  14               	and library dependent stuff. The C code is written for avr-gcc and avr-libc.
  15               	The API of other development environments is converted to gcc's and avr-libc's
  16               	API by means of defines.
  17               	
  18               	This header also contains all system includes since they depend on the
  19               	development environment.
  20               	
  21               	Thanks to Oleg Semyonov for his help with the IAR tools port!
  22               	*/
  23               	
  24               	#ifndef __usbportability_h_INCLUDED__
  25               	#define __usbportability_h_INCLUDED__
  26               	
  27               	/* We check explicitly for IAR and CodeVision. Default is avr-gcc/avr-libc. */
  28               	
  29               	/* ------------------------------------------------------------------------- */
  30               	#if defined __IAR_SYSTEMS_ICC__ || defined __IAR_SYSTEMS_ASM__  /* check for IAR */
  31               	/* ------------------------------------------------------------------------- */
  32               	
  33               	#ifndef ENABLE_BIT_DEFINITIONS
  34               	#   define ENABLE_BIT_DEFINITIONS	1   /* Enable bit definitions */
  35               	#endif
  36               	
  37               	/* Include IAR headers */
  38               	#include <ioavr.h>
  39               	#ifndef __IAR_SYSTEMS_ASM__
  40               	#   include <inavr.h>
  41               	#endif
  42               	
  43               	#define __attribute__(arg)  /* not supported on IAR */
  44               	
  45               	#ifdef __IAR_SYSTEMS_ASM__
  46               	#   define __ASSEMBLER__    /* IAR does not define standard macro for asm */
  47               	#endif
  48               	
  49               	#ifdef __HAS_ELPM__
  50               	#   define PROGMEM __farflash
  51               	#else
  52               	#   define PROGMEM __flash
  53               	#endif
  54               	
  55               	#define USB_READ_FLASH(addr)    (*(PROGMEM char *)(addr))
  56               	
  57               	/* The following definitions are not needed by the driver, but may be of some
  58               	 * help if you port a gcc based project to IAR.
  59               	 */
  60               	#define cli()       __disable_interrupt()
  61               	#define sei()       __enable_interrupt()
  62               	#define wdt_reset() __watchdog_reset()
  63               	#define _BV(x)      (1 << (x))
  64               	
  65               	/* assembler compatibility macros */
  66               	#define nop2    rjmp    $+2 /* jump to next instruction */
  67               	#define XL      r26
  68               	#define XH      r27
  69               	#define YL      r28
  70               	#define YH      r29
  71               	#define ZL      r30
  72               	#define ZH      r31
  73               	#define lo8(x)  LOW(x)
  74               	#define hi8(x)  (((x)>>8) & 0xff)   /* not HIGH to allow XLINK to make a proper range check */
  75               	
  76               	/* Depending on the device you use, you may get problems with the way usbdrv.h
  77               	 * handles the differences between devices. Since IAR does not use #defines
  78               	 * for MCU registers, we can't check for the existence of a particular
  79               	 * register with an #ifdef. If the autodetection mechanism fails, include
  80               	 * definitions for the required USB_INTR_* macros in your usbconfig.h. See
  81               	 * usbconfig-prototype.h and usbdrv.h for details.
  82               	 */
  83               	
  84               	/* ------------------------------------------------------------------------- */
  85               	#elif __CODEVISIONAVR__ /* check for CodeVision AVR */
  86               	/* ------------------------------------------------------------------------- */
  87               	/* This port is not working (yet) */
  88               	
  89               	/* #define F_CPU   _MCU_CLOCK_FREQUENCY_    seems to be defined automatically */
  90               	
  91               	#include <io.h>
  92               	#include <delay.h>
  93               	
  94               	#define __attribute__(arg)  /* not supported on IAR */
  95               	
  96               	#define PROGMEM                 __flash
  97               	#define USB_READ_FLASH(addr)    (*(PROGMEM char *)(addr))
  98               	
  99               	#ifndef __ASSEMBLER__
 100               	static inline void  cli(void)
 101               	{
 102               	    #asm("cli");
 103               	}
 104               	static inline void  sei(void)
 105               	{
 106               	    #asm("sei");
 107               	}
 108               	#endif
 109               	#define _delay_ms(t)    delay_ms(t)
 110               	#define _BV(x)          (1 << (x))
 111               	#define USB_CFG_USE_SWITCH_STATEMENT 1  /* macro for if() cascase fails for unknown reason */
 112               	
 113               	#define macro   .macro
 114               	#define endm    .endmacro
 115               	#define nop2    rjmp    .+0 /* jump to next instruction */
 116               	
 117               	/* ------------------------------------------------------------------------- */
 118               	#else   /* default development environment is avr-gcc/avr-libc */
 119               	/* ------------------------------------------------------------------------- */
 120               	
 121               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id$ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM161__)
 126               	#  include <avr/io90pwm161.h>
 127               	#elif defined (__AVR_AT90PWM81__)
 128               	#  include <avr/io90pwm81.h>
 129               	#elif defined (__AVR_ATmega8U2__)
 130               	#  include <avr/iom8u2.h>
 131               	#elif defined (__AVR_ATmega16M1__)
 132               	#  include <avr/iom16m1.h>
 133               	#elif defined (__AVR_ATmega16U2__)
 134               	#  include <avr/iom16u2.h>
 135               	#elif defined (__AVR_ATmega16U4__)
 136               	#  include <avr/iom16u4.h>
 137               	#elif defined (__AVR_ATmega32C1__)
 138               	#  include <avr/iom32c1.h>
 139               	#elif defined (__AVR_ATmega32M1__)
 140               	#  include <avr/iom32m1.h>
 141               	#elif defined (__AVR_ATmega32U2__)
 142               	#  include <avr/iom32u2.h>
 143               	#elif defined (__AVR_ATmega32U4__)
 144               	#  include <avr/iom32u4.h>
 145               	#elif defined (__AVR_ATmega32U6__)
 146               	#  include <avr/iom32u6.h>
 147               	#elif defined (__AVR_ATmega64C1__)
 148               	#  include <avr/iom64c1.h>
 149               	#elif defined (__AVR_ATmega64M1__)
 150               	#  include <avr/iom64m1.h>
 151               	#elif defined (__AVR_ATmega128__)
 152               	#  include <avr/iom128.h>
 153               	#elif defined (__AVR_ATmega128A__)
 154               	#  include <avr/iom128a.h>
 155               	#elif defined (__AVR_ATmega1280__)
 156               	#  include <avr/iom1280.h>
 157               	#elif defined (__AVR_ATmega1281__)
 158               	#  include <avr/iom1281.h>
 159               	#elif defined (__AVR_ATmega1284__)
 160               	#  include <avr/iom1284.h>
 161               	#elif defined (__AVR_ATmega1284P__)
 162               	#  include <avr/iom1284p.h>
 163               	#elif defined (__AVR_ATmega128RFA1__)
 164               	#  include <avr/iom128rfa1.h>
 165               	#elif defined (__AVR_ATmega128RFR2__)
 166               	#  include <avr/iom128rfr2.h>
 167               	#elif defined (__AVR_ATmega1284RFR2__)
 168               	#  include <avr/iom1284rfr2.h>
 169               	#elif defined (__AVR_ATmega256RFR2__)
 170               	#  include <avr/iom256rfr2.h>
 171               	#elif defined (__AVR_ATmega2564RFR2__)
 172               	#  include <avr/iom2564rfr2.h>
 173               	#elif defined (__AVR_ATmega2560__)
 174               	#  include <avr/iom2560.h>
 175               	#elif defined (__AVR_ATmega2561__)
 176               	#  include <avr/iom2561.h>
 177               	#elif defined (__AVR_AT90CAN32__)
 178               	#  include <avr/iocan32.h>
 179               	#elif defined (__AVR_AT90CAN64__)
 180               	#  include <avr/iocan64.h>
 181               	#elif defined (__AVR_AT90CAN128__)
 182               	#  include <avr/iocan128.h>
 183               	#elif defined (__AVR_AT90USB82__)
 184               	#  include <avr/iousb82.h>
 185               	#elif defined (__AVR_AT90USB162__)
 186               	#  include <avr/iousb162.h>
 187               	#elif defined (__AVR_AT90USB646__)
 188               	#  include <avr/iousb646.h>
 189               	#elif defined (__AVR_AT90USB647__)
 190               	#  include <avr/iousb647.h>
 191               	#elif defined (__AVR_AT90USB1286__)
 192               	#  include <avr/iousb1286.h>
 193               	#elif defined (__AVR_AT90USB1287__)
 194               	#  include <avr/iousb1287.h>
 195               	#elif defined (__AVR_ATmega64RFR2__)
 196               	#  include <avr/iom64rfr2.h>
 197               	#elif defined (__AVR_ATmega644RFR2__)
 198               	#  include <avr/iom644rfr2.h>
 199               	#elif defined (__AVR_ATmega64__)
 200               	#  include <avr/iom64.h>
 201               	#elif defined (__AVR_ATmega64A__)
 202               	#  include <avr/iom64a.h>
 203               	#elif defined (__AVR_ATmega640__)
 204               	#  include <avr/iom640.h>
 205               	#elif defined (__AVR_ATmega644__) 
 206               	#  include <avr/iom644.h>
 207               	#elif (defined __AVR_ATmega644A__)
 208               	#include <avr/iom644a.h>
 209               	#elif defined (__AVR_ATmega644P__)
 210               	#  include <avr/iom644p.h>
 211               	#elif defined (__AVR_ATmega644PA__)
 212               	#  include <avr/iom644pa.h>
 213               	#elif defined (__AVR_ATmega645__)
 214               	#  include <avr/iom645.h>
 215               	#elif (defined __AVR_ATmega645A__)
 216               	#include <avr/iom645a.h>
 217               	#elif (defined __AVR_ATmega645P__)
 218               	#include <avr/iom645p.h>
 219               	#elif defined (__AVR_ATmega6450__)
 220               	#  include <avr/iom6450.h>
 221               	#elif (defined __AVR_ATmega6450A__)
 222               	#include <avr/iom6450a.h>
 223               	#elif (defined __AVR_ATmega6450P__)
 224               	#include <avr/iom6450p.h>
 225               	#elif defined (__AVR_ATmega649__)
 226               	#  include <avr/iom649.h>
 227               	#elif (defined __AVR_ATmega649A__)
 228               	#include <avr/iom649a.h>
 229               	#elif defined (__AVR_ATmega6490__)
 230               	#  include <avr/iom6490.h>
 231               	#elif (defined __AVR_ATmega6490A__)
 232               	#include <avr/iom6490a.h>
 233               	#elif (defined __AVR_ATmega6490P__)
 234               	#include <avr/iom6490p.h>
 235               	#elif defined (__AVR_ATmega649P__)
 236               	#  include <avr/iom649p.h>
 237               	#elif defined (__AVR_ATmega64HVE__)
 238               	#  include <avr/iom64hve.h>
 239               	#elif defined (__AVR_ATmega64HVE2__)
 240               	#  include <avr/iom64hve2.h>
 241               	#elif defined (__AVR_ATmega103__)
 242               	#  include <avr/iom103.h>
 243               	#elif defined (__AVR_ATmega32__)
 244               	#  include <avr/iom32.h>
 245               	#elif defined (__AVR_ATmega32A__)
 246               	#  include <avr/iom32a.h>
 247               	#elif defined (__AVR_ATmega323__)
 248               	#  include <avr/iom323.h>
 249               	#elif defined (__AVR_ATmega324P__)
 250               	#  include <avr/iom324p.h>
 251               	#elif (defined __AVR_ATmega324A__)
 252               	#include <avr/iom324a.h>
 253               	#elif defined (__AVR_ATmega324PA__)
 254               	#  include <avr/iom324pa.h>
 255               	#elif defined (__AVR_ATmega325__)
 256               	#  include <avr/iom325.h>
 257               	#elif (defined __AVR_ATmega325A__)
 258               	#include <avr/iom325a.h>
 259               	#elif defined (__AVR_ATmega325P__)
 260               	#  include <avr/iom325p.h>
 261               	#elif defined (__AVR_ATmega325PA__)
 262               	#  include <avr/iom325pa.h>  
 263               	#elif defined (__AVR_ATmega3250__) 
 264               	#  include <avr/iom3250.h>
 265               	#elif (defined __AVR_ATmega3250A__)
 266               	#include <avr/iom3250a.h>
 267               	#elif defined (__AVR_ATmega3250P__)
 268               	#  include <avr/iom3250p.h>
 269               	#elif defined (__AVR_ATmega3250PA__)
 270               	#  include <avr/iom3250pa.h>  
 271               	#elif defined (__AVR_ATmega328P__)
 272               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 273               	#elif (defined __AVR_ATmega328__)
 274               	#include <avr/iom328.h>
 275               	#elif defined (__AVR_ATmega329__)
 276               	#  include <avr/iom329.h>
 277               	#elif (defined __AVR_ATmega329A__)
 278               	#include <avr/iom329a.h>
 279               	#elif defined (__AVR_ATmega329P__) 
 280               	#  include <avr/iom329p.h>
 281               	#elif (defined __AVR_ATmega329PA__)
 282               	#include <avr/iom329pa.h>
 283               	#elif (defined __AVR_ATmega3290PA__)
 284               	#include <avr/iom3290pa.h>
 285               	#elif defined (__AVR_ATmega3290__)
 286               	#  include <avr/iom3290.h>
 287               	#elif (defined __AVR_ATmega3290A__)
 288               	#include <avr/iom3290a.h>
 289               	#elif defined (__AVR_ATmega3290P__)
 290               	#  include <avr/iom3290.h>
 291               	#elif defined (__AVR_ATmega32HVB__)
 292               	#  include <avr/iom32hvb.h>
 293               	#elif defined (__AVR_ATmega32HVBREVB__)
 294               	#  include <avr/iom32hvbrevb.h>
 295               	#elif defined (__AVR_ATmega406__)
 296               	#  include <avr/iom406.h>
 297               	#elif defined (__AVR_ATmega16__)
 298               	#  include <avr/iom16.h>
 299               	#elif defined (__AVR_ATmega16A__)
 300               	#  include <avr/iom16a.h>
 301               	#elif defined (__AVR_ATmega161__)
 302               	#  include <avr/iom161.h>
 303               	#elif defined (__AVR_ATmega162__)
 304               	#  include <avr/iom162.h>
 305               	#elif defined (__AVR_ATmega163__)
 306               	#  include <avr/iom163.h>
 307               	#elif defined (__AVR_ATmega164P__)
 308               	#  include <avr/iom164p.h>
 309               	#elif (defined __AVR_ATmega164A__)
 310               	#include <avr/iom164a.h>
 311               	#elif defined (__AVR_ATmega164PA__)
 312               	#  include <avr/iom164pa.h>
 313               	#elif defined (__AVR_ATmega165__)
 314               	#  include <avr/iom165.h>
 315               	#elif (defined __AVR_ATmega165A__)
 316               	#include <avr/iom165a.h>
 317               	#elif defined (__AVR_ATmega165P__)
 318               	#  include <avr/iom165p.h>
 319               	#elif defined (__AVR_ATmega165PA__)
 320               	#  include <avr/iom165pa.h>
 321               	#elif defined (__AVR_ATmega168__)
 322               	#  include <avr/iom168.h>
 323               	#elif (defined __AVR_ATmega168A__)
 324               	#include <avr/iom168a.h>
 325               	#elif defined (__AVR_ATmega168P__)
 326               	#  include <avr/iom168p.h>
 327               	#elif defined (__AVR_ATmega168PA__)
 328               	#  include <avr/iom168pa.h>
 329               	#elif defined (__AVR_ATmega168PB__)
 330               	#  include <avr/iom168pb.h>
 331               	#elif defined (__AVR_ATmega169__)
 332               	#  include <avr/iom169.h>
 333               	#elif (defined __AVR_ATmega169A__)
 334               	#include <avr/iom169a.h>
 335               	#elif defined (__AVR_ATmega169P__)
 336               	#  include <avr/iom169p.h>
 337               	#elif defined (__AVR_ATmega169PA__)
 338               	#  include <avr/iom169pa.h>
 339               	#elif defined (__AVR_ATmega8HVA__)
 340               	#  include <avr/iom8hva.h>
 341               	#elif defined (__AVR_ATmega16HVA__)
 342               	#  include <avr/iom16hva.h>
 343               	#elif defined (__AVR_ATmega16HVA2__)
 344               	#  include <avr/iom16hva2.h>
 345               	#elif defined (__AVR_ATmega16HVB__)
 346               	#  include <avr/iom16hvb.h>
 347               	#elif defined (__AVR_ATmega16HVBREVB__)
 348               	#  include <avr/iom16hvbrevb.h>
 349               	#elif defined (__AVR_ATmega8__)
 350               	#  include <avr/iom8.h>
 351               	#elif defined (__AVR_ATmega8A__)
 352               	#  include <avr/iom8a.h>
 353               	#elif (defined __AVR_ATmega48A__)
 354               	#  include <avr/iom48a.h>
 355               	#elif defined (__AVR_ATmega48__)
 356               	#  include <avr/iom48.h>
 357               	#elif defined (__AVR_ATmega48PA__)
 358               	#  include <avr/iom48pa.h>
 359               	#elif defined (__AVR_ATmega48PB__)
 360               	#  include <avr/iom48pb.h>
 361               	#elif defined (__AVR_ATmega48P__)
 362               	#  include <avr/iom48p.h>
 363               	#elif defined (__AVR_ATmega88__)
 364               	#  include <avr/iom88.h>
 365               	#elif (defined __AVR_ATmega88A__)
 366               	#  include <avr/iom88a.h>
 367               	#elif defined (__AVR_ATmega88P__)
 368               	#  include <avr/iom88p.h>
 369               	#elif defined (__AVR_ATmega88PA__)
 370               	#  include <avr/iom88pa.h>
 371               	#elif defined (__AVR_ATmega88PB__)
 372               	#  include <avr/iom88pb.h>
 373               	#elif defined (__AVR_ATmega8515__)
 374               	#  include <avr/iom8515.h>
 375               	#elif defined (__AVR_ATmega8535__)
 376               	#  include <avr/iom8535.h>
 377               	#elif defined (__AVR_AT90S8535__)
 378               	#  include <avr/io8535.h>
 379               	#elif defined (__AVR_AT90C8534__)
 380               	#  include <avr/io8534.h>
 381               	#elif defined (__AVR_AT90S8515__)
 382               	#  include <avr/io8515.h>
 383               	#elif defined (__AVR_AT90S4434__)
 384               	#  include <avr/io4434.h>
 385               	#elif defined (__AVR_AT90S4433__)
 386               	#  include <avr/io4433.h>
 387               	#elif defined (__AVR_AT90S4414__)
 388               	#  include <avr/io4414.h>
 389               	#elif defined (__AVR_ATtiny22__)
 390               	#  include <avr/iotn22.h>
 391               	#elif defined (__AVR_ATtiny26__)
 392               	#  include <avr/iotn26.h>
 393               	#elif defined (__AVR_AT90S2343__)
 394               	#  include <avr/io2343.h>
 395               	#elif defined (__AVR_AT90S2333__)
 396               	#  include <avr/io2333.h>
 397               	#elif defined (__AVR_AT90S2323__)
 398               	#  include <avr/io2323.h>
 399               	#elif defined (__AVR_AT90S2313__)
 400               	#  include <avr/io2313.h>
 401               	#elif defined (__AVR_ATtiny4__)
 402               	#  include <avr/iotn4.h>
 403               	#elif defined (__AVR_ATtiny5__)
 404               	#  include <avr/iotn5.h>
 405               	#elif defined (__AVR_ATtiny9__)
 406               	#  include <avr/iotn9.h>
 407               	#elif defined (__AVR_ATtiny10__)
 408               	#  include <avr/iotn10.h>
 409               	#elif defined (__AVR_ATtiny20__)
 410               	#  include <avr/iotn20.h>
 411               	#elif defined (__AVR_ATtiny40__)
 412               	#  include <avr/iotn40.h>
 413               	#elif defined (__AVR_ATtiny2313__)
 414               	#  include <avr/iotn2313.h>
 415               	#elif defined (__AVR_ATtiny2313A__)
 416               	#  include <avr/iotn2313a.h>
 417               	#elif defined (__AVR_ATtiny13__)
 418               	#  include <avr/iotn13.h>
 419               	#elif defined (__AVR_ATtiny13A__)
 420               	#  include <avr/iotn13a.h>
 421               	#elif defined (__AVR_ATtiny25__)
 422               	#  include <avr/iotn25.h>
 423               	#elif defined (__AVR_ATtiny4313__)
 424               	#  include <avr/iotn4313.h>
 425               	#elif defined (__AVR_ATtiny45__)
 426               	#  include <avr/iotn45.h>
 427               	#elif defined (__AVR_ATtiny85__)
 428               	#  include <avr/iotn85.h>
 429               	#elif defined (__AVR_ATtiny24__)
 430               	#  include <avr/iotn24.h>
 431               	#elif defined (__AVR_ATtiny24A__)
 432               	#  include <avr/iotn24a.h>
 433               	#elif defined (__AVR_ATtiny44__)
 434               	#  include <avr/iotn44.h>
 435               	#elif defined (__AVR_ATtiny44A__)
 436               	#  include <avr/iotn44a.h>
 437               	#elif defined (__AVR_ATtiny441__)
 438               	#  include <avr/iotn441.h>
 439               	#elif defined (__AVR_ATtiny84__)
 440               	#  include <avr/iotn84.h>
 441               	#elif defined (__AVR_ATtiny84A__)
 442               	#  include <avr/iotn84a.h>  
 443               	#elif defined (__AVR_ATtiny841__)
 444               	#  include <avr/iotn841.h>
 445               	#elif defined (__AVR_ATtiny261__)
 446               	#  include <avr/iotn261.h>
 447               	#elif defined (__AVR_ATtiny261A__)
 448               	#  include <avr/iotn261a.h>
 449               	#elif defined (__AVR_ATtiny461__)
 450               	#  include <avr/iotn461.h>
 451               	#elif defined (__AVR_ATtiny461A__)
 452               	#  include <avr/iotn461a.h>
 453               	#elif defined (__AVR_ATtiny861__)
 454               	#  include <avr/iotn861.h>
 455               	#elif defined (__AVR_ATtiny861A__)
 456               	#  include <avr/iotn861a.h>
 457               	#elif defined (__AVR_ATtiny43U__)
 458               	#  include <avr/iotn43u.h>
 459               	#elif defined (__AVR_ATtiny48__)
 460               	#  include <avr/iotn48.h>
 461               	#elif defined (__AVR_ATtiny88__)
 462               	#  include <avr/iotn88.h>
 463               	#elif defined (__AVR_ATtiny828__)
 464               	#  include <avr/iotn828.h>
 465               	#elif defined (__AVR_ATtiny87__)
 466               	#  include <avr/iotn87.h>
 467               	#elif defined (__AVR_ATtiny167__)
 468               	#  include <avr/iotn167.h>
 469               	#elif defined (__AVR_ATtiny1634__)
 470               	#  include <avr/iotn1634.h>
 471               	#elif defined (__AVR_AT90SCR100__)
 472               	#  include <avr/io90scr100.h>
 473               	#elif defined (__AVR_ATxmega16A4__)
 474               	#  include <avr/iox16a4.h>
 475               	#elif defined (__AVR_ATxmega16A4U__)
 476               	#  include <avr/iox16a4u.h>
 477               	#elif defined (__AVR_ATxmega16C4__)
 478               	#  include <avr/iox16c4.h>
 479               	#elif defined (__AVR_ATxmega16D4__)
 480               	#  include <avr/iox16d4.h>
 481               	#elif defined (__AVR_ATxmega32A4__)
 482               	#  include <avr/iox32a4.h>
 483               	#elif defined (__AVR_ATxmega32A4U__)
 484               	#  include <avr/iox32a4u.h>
 485               	#elif defined (__AVR_ATxmega32C3__)
 486               	#  include <avr/iox32c3.h>
 487               	#elif defined (__AVR_ATxmega32C4__)
 488               	#  include <avr/iox32c4.h>
 489               	#elif defined (__AVR_ATxmega32D3__)
 490               	#  include <avr/iox32d3.h>
 491               	#elif defined (__AVR_ATxmega32D4__)
 492               	#  include <avr/iox32d4.h>
 493               	#elif defined (__AVR_ATxmega8E5__)
 494               	#  include <avr/iox8e5.h>
 495               	#elif defined (__AVR_ATxmega16E5__)
 496               	#  include <avr/iox16e5.h>
 497               	#elif defined (__AVR_ATxmega32E5__)
 498               	#  include <avr/iox32e5.h>
 499               	#elif defined (__AVR_ATxmega64A1__)
 500               	#  include <avr/iox64a1.h>
 501               	#elif defined (__AVR_ATxmega64A1U__)
 502               	#  include <avr/iox64a1u.h>
 503               	#elif defined (__AVR_ATxmega64A3__)
 504               	#  include <avr/iox64a3.h>
 505               	#elif defined (__AVR_ATxmega64A3U__)
 506               	#  include <avr/iox64a3u.h>
 507               	#elif defined (__AVR_ATxmega64A4U__)
 508               	#  include <avr/iox64a4u.h>
 509               	#elif defined (__AVR_ATxmega64B1__)
 510               	#  include <avr/iox64b1.h>
 511               	#elif defined (__AVR_ATxmega64B3__)
 512               	#  include <avr/iox64b3.h>
 513               	#elif defined (__AVR_ATxmega64C3__)
 514               	#  include <avr/iox64c3.h>
 515               	#elif defined (__AVR_ATxmega64D3__)
 516               	#  include <avr/iox64d3.h>
 517               	#elif defined (__AVR_ATxmega64D4__)
 518               	#  include <avr/iox64d4.h>
 519               	#elif defined (__AVR_ATxmega128A1__)
 520               	#  include <avr/iox128a1.h>
 521               	#elif defined (__AVR_ATxmega128A1U__)
 522               	#  include <avr/iox128a1u.h>
 523               	#elif defined (__AVR_ATxmega128A4U__)
 524               	#  include <avr/iox128a4u.h>
 525               	#elif defined (__AVR_ATxmega128A3__)
 526               	#  include <avr/iox128a3.h>
 527               	#elif defined (__AVR_ATxmega128A3U__)
 528               	#  include <avr/iox128a3u.h>
 529               	#elif defined (__AVR_ATxmega128B1__)
 530               	#  include <avr/iox128b1.h>
 531               	#elif defined (__AVR_ATxmega128B3__)
 532               	#  include <avr/iox128b3.h>
 533               	#elif defined (__AVR_ATxmega128C3__)
 534               	#  include <avr/iox128c3.h>
 535               	#elif defined (__AVR_ATxmega128D3__)
 536               	#  include <avr/iox128d3.h>
 537               	#elif defined (__AVR_ATxmega128D4__)
 538               	#  include <avr/iox128d4.h>
 539               	#elif defined (__AVR_ATxmega192A3__)
 540               	#  include <avr/iox192a3.h>
 541               	#elif defined (__AVR_ATxmega192A3U__)
 542               	#  include <avr/iox192a3u.h>
 543               	#elif defined (__AVR_ATxmega192C3__)
 544               	#  include <avr/iox192c3.h>
 545               	#elif defined (__AVR_ATxmega192D3__)
 546               	#  include <avr/iox192d3.h>
 547               	#elif defined (__AVR_ATxmega256A3__)
 548               	#  include <avr/iox256a3.h>
 549               	#elif defined (__AVR_ATxmega256A3U__)
 550               	#  include <avr/iox256a3u.h>
 551               	#elif defined (__AVR_ATxmega256A3B__)
 552               	#  include <avr/iox256a3b.h>
 553               	#elif defined (__AVR_ATxmega256A3BU__)
 554               	#  include <avr/iox256a3bu.h>
 555               	#elif defined (__AVR_ATxmega256C3__)
 556               	#  include <avr/iox256c3.h>
 557               	#elif defined (__AVR_ATxmega256D3__)
 558               	#  include <avr/iox256d3.h>
 559               	#elif defined (__AVR_ATxmega384C3__)
 560               	#  include <avr/iox384c3.h>
 561               	#elif defined (__AVR_ATxmega384D3__)
 562               	#  include <avr/iox384d3.h>
 563               	#elif defined (__AVR_ATA5790__)
 564               	#  include <avr/ioa5790.h>
 565               	#elif defined (__AVR_ATA5790N__)
 566               	#  include <avr/ioa5790n.h>
 567               	#elif defined (__AVR_ATA5791__)
 568               	#  include <avr/ioa5791.h>
 569               	#elif defined (__AVR_ATA5272__)
 570               	#  include <avr/ioa5272.h>
 571               	#elif defined (__AVR_ATA5505__)
 572               	#  include <avr/ioa5505.h>
 573               	#elif defined (__AVR_ATA5795__)
 574               	#  include <avr/ioa5795.h>
 575               	#elif defined (__AVR_ATA5702M322__)
 576               	#  include <avr/ioa5702m322.h>
 577               	#elif defined (__AVR_ATA5782__)
 578               	#  include <avr/ioa5782.h>
 579               	#elif defined (__AVR_ATA8210__)
 580               	#  include <avr/ioa8210.h>
 581               	#elif defined (__AVR_ATA5831__)
 582               	#  include <avr/ioa5831.h>
 583               	#elif defined (__AVR_ATA8510__)
 584               	#  include <avr/ioa8510.h>
 585               	#elif defined (__AVR_ATA6285__)
 586               	#  include <avr/ioa6285.h>
 587               	#elif defined (__AVR_ATA6286__)
 588               	#  include <avr/ioa6286.h>
 589               	#elif defined (__AVR_ATA6289__)
 590               	#  include <avr/ioa6289.h>
 591               	#elif defined (__AVR_ATA6612C__)
 592               	#  include <avr/ioa6612c.h>
 593               	#elif defined (__AVR_ATA6613C__)
 594               	#  include <avr/ioa6613c.h>
 595               	#elif defined (__AVR_ATA6614Q__)
 596               	#  include <avr/ioa6614q.h>
 597               	#elif defined (__AVR_ATA6616C__)
 598               	#  include <avr/ioa6616c.h>
 599               	#elif defined (__AVR_ATA6617C__)
 600               	#  include <avr/ioa6617c.h>
 601               	#elif defined (__AVR_ATA664251__)
 602               	#  include <avr/ioa664251.h>
 603               	/* avr1: the following only supported for assembler programs */
 604               	#elif defined (__AVR_ATtiny28__)
 605               	#  include <avr/iotn28.h>
 606               	#elif defined (__AVR_AT90S1200__)
 607               	#  include <avr/io1200.h>
 608               	#elif defined (__AVR_ATtiny15__)
 609               	#  include <avr/iotn15.h>
 610               	#elif defined (__AVR_ATtiny12__)
 611               	#  include <avr/iotn12.h>
 612               	#elif defined (__AVR_ATtiny11__)
 613               	#  include <avr/iotn11.h>
 614               	#elif defined (__AVR_M3000__)
 615               	#  include <avr/iom3000.h>
 616               	#elif defined (__AVR_DEV_LIB_NAME__)
 617               	#  define __concat__(a,b) a##b
 618               	#  define __header1__(a,b) __concat__(a,b)
 619               	#  define __AVR_DEVICE_HEADER__ <avr/__header1__(io,__AVR_DEV_LIB_NAME__).h>
 620               	#  include __AVR_DEVICE_HEADER__
 621               	#else
 622               	#  if !defined(__COMPILING_AVR_LIBC__)
 623               	#    warning "device type not defined"
 624               	#  endif
 625               	#endif
 626               	
 627               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 628               	
 629               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 630               	
 631               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 632               	
 633               	#if __AVR_ARCH__ >= 100
 634               	#  include <avr/xmega.h>
 635               	#endif
 636               	
 637               	/* Include fuse.h after individual IO header files. */
 638               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 639               	
 640               	/* Include lock.h after individual IO header files. */
 641               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 642               	
 122               	#ifdef __ASSEMBLER__
  20               	#include "usbdrv.h"         /* for common defs */
   1               	/* Name: usbdrv.h
   2               	 * Project: V-USB, virtual USB port for Atmel's(r) AVR(r) microcontrollers
   3               	 * Author: Christian Starkjohann
   4               	 * Creation Date: 2004-12-29
   5               	 * Tabsize: 4
   6               	 * Copyright: (c) 2005 by OBJECTIVE DEVELOPMENT Software GmbH
   7               	 * License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)
   8               	 * This Revision: $Id: usbdrv.h 769 2009-08-22 11:49:05Z cs $
   9               	 */
  10               	
  11               	#ifndef __usbdrv_h_included__
  12               	#define __usbdrv_h_included__
  13               	#include "usbconfig.h"
   1               	/* Name: usbconfig.h
  14               	#include "usbportability.h"
  21               	
  22               	/* register names */
  23               	#define x1      r16
  24               	#define x2      r17
  25               	#define shift   r18
  26               	#define cnt     r19
  27               	#define x3      r20
  28               	#define x4      r21
  29               	#define x5		r22
  30               	#define bitcnt  x5
  31               	#define phase   x4
  32               	#define leap    x4
  33               	
  34               	/* Some assembler dependent definitions and declarations: */
  35               	
  36               	#ifdef __IAR_SYSTEMS_ASM__
  37               	    extern  usbRxBuf, usbDeviceAddr, usbNewDeviceAddr, usbInputBufOffset
  38               	    extern  usbCurrentTok, usbRxLen, usbRxToken, usbTxLen
  39               	    extern  usbTxBuf, usbTxStatus1, usbTxStatus3
  40               	#   if USB_COUNT_SOF
  41               	        extern usbSofCount
  42               	#   endif
  43               	    public  usbCrc16
  44               	    public  usbCrc16Append
  45               	
  46               	    COMMON  INTVEC
  47               	#   ifndef USB_INTR_VECTOR
  48               	        ORG     INT0_vect
  49               	#   else /* USB_INTR_VECTOR */
  50               	        ORG     USB_INTR_VECTOR
  51               	#       undef   USB_INTR_VECTOR
  52               	#   endif /* USB_INTR_VECTOR */
  53               	#   define  USB_INTR_VECTOR usbInterruptHandler
  54               	    rjmp    USB_INTR_VECTOR
  55               	    RSEG    CODE
  56               	
  57               	#else /* __IAR_SYSTEMS_ASM__ */
  58               	
  59               	#   ifndef USB_INTR_VECTOR /* default to hardware interrupt INT0 */
  60               	#       define USB_INTR_VECTOR  SIG_INTERRUPT0
  61               	#   endif
  62               	    .text
  63               	    .global USB_INTR_VECTOR
  65               	    .global usbCrc16
  66               	    .global usbCrc16Append
  67               	#endif /* __IAR_SYSTEMS_ASM__ */
  68               	
  69               	
  70               	#if USB_INTR_PENDING < 0x40 /* This is an I/O address, use in and out */
  71               	#   define  USB_LOAD_PENDING(reg)   in reg, USB_INTR_PENDING
  72               	#   define  USB_STORE_PENDING(reg)  out USB_INTR_PENDING, reg
  73               	#else   /* It's a memory address, use lds and sts */
  74               	#   define  USB_LOAD_PENDING(reg)   lds reg, USB_INTR_PENDING
  75               	#   define  USB_STORE_PENDING(reg)  sts USB_INTR_PENDING, reg
  76               	#endif
  77               	
  78               	#define usbTxLen1   usbTxStatus1
  79               	#define usbTxBuf1   (usbTxStatus1 + 1)
  80               	#define usbTxLen3   usbTxStatus3
  81               	#define usbTxBuf3   (usbTxStatus3 + 1)
  82               	
  83               	
  84               	;----------------------------------------------------------------------------
  85               	; Utility functions
  86               	;----------------------------------------------------------------------------
  87               	
  88               	#ifdef __IAR_SYSTEMS_ASM__
  89               	/* Register assignments for usbCrc16 on IAR cc */
  90               	/* Calling conventions on IAR:
  91               	 * First parameter passed in r16/r17, second in r18/r19 and so on.
  92               	 * Callee must preserve r4-r15, r24-r29 (r28/r29 is frame pointer)
  93               	 * Result is passed in r16/r17
  94               	 * In case of the "tiny" memory model, pointers are only 8 bit with no
  95               	 * padding. We therefore pass argument 1 as "16 bit unsigned".
  96               	 */
  97               	RTMODEL "__rt_version", "3"
  98               	/* The line above will generate an error if cc calling conventions change.
  99               	 * The value "3" above is valid for IAR 4.10B/W32
 100               	 */
 101               	#   define argLen   r18 /* argument 2 */
 102               	#   define argPtrL  r16 /* argument 1 */
 103               	#   define argPtrH  r17 /* argument 1 */
 104               	
 105               	#   define resCrcL  r16 /* result */
 106               	#   define resCrcH  r17 /* result */
 107               	
 108               	#   define ptrL     ZL
 109               	#   define ptrH     ZH
 110               	#   define ptr      Z
 111               	#   define byte     r22
 112               	#   define bitCnt   r19
 113               	#   define polyL    r20
 114               	#   define polyH    r21
 115               	#   define scratch  r23
 116               	
 117               	#else  /* __IAR_SYSTEMS_ASM__ */ 
 118               	/* Register assignments for usbCrc16 on gcc */
 119               	/* Calling conventions on gcc:
 120               	 * First parameter passed in r24/r25, second in r22/23 and so on.
 121               	 * Callee must preserve r1-r17, r28/r29
 122               	 * Result is passed in r24/r25
 123               	 */
 124               	#   define argLen   r22 /* argument 2 */
 125               	#   define argPtrL  r24 /* argument 1 */
 126               	#   define argPtrH  r25 /* argument 1 */
 127               	
 128               	#   define resCrcL  r24 /* result */
 129               	#   define resCrcH  r25 /* result */
 130               	
 131               	#   define ptrL     XL
 132               	#   define ptrH     XH
 133               	#   define ptr      x
 134               	#   define byte     r18
 135               	#   define bitCnt   r19
 136               	#   define polyL    r20
 137               	#   define polyH    r21
 138               	#   define scratch  r23
 139               	
 140               	#endif
 141               	
 142               	#if USB_USE_FAST_CRC
 143               	
 144               	; This implementation is faster, but has bigger code size
 145               	; Thanks to Slawomir Fras (BoskiDialer) for this code!
 146               	; It implements the following C pseudo-code:
 147               	; unsigned table(unsigned char x)
 148               	; {
 149               	; unsigned    value;
 150               	; 
 151               	;     value = (unsigned)x << 6;
 152               	;     value ^= (unsigned)x << 7;
 153               	;     if(parity(x))
 154               	;         value ^= 0xc001;
 155               	;     return value;
 156               	; }
 157               	; unsigned usbCrc16(unsigned char *argPtr, unsigned char argLen)
 158               	; {
 159               	; unsigned crc = 0xffff;
 160               	; 
 161               	;     while(argLen--)
 162               	;         crc = table(lo8(crc) ^ *argPtr++) ^ hi8(crc);
 163               	;     return ~crc;
 164               	; }
 165               	
 166               	; extern unsigned usbCrc16(unsigned char *argPtr, unsigned char argLen);
 167               	;   argPtr  r24+25 / r16+r17
 168               	;   argLen  r22 / r18
 169               	; temp variables:
 170               	;   byte    r18 / r22
 171               	;   scratch r23
 172               	;   resCrc  r24+r25 / r16+r17
 173               	;   ptr     X / Z
 174               	usbCrc16:
 175               	    mov     ptrL, argPtrL
 176               	    mov     ptrH, argPtrH
 177               	    ldi     resCrcL, 0xFF
 178               	    ldi     resCrcH, 0xFF
 179               	    rjmp    usbCrc16LoopTest
 180               	usbCrc16ByteLoop:
 181               	    ld      byte, ptr+
 182               	    eor     resCrcL, byte   ; resCrcL is now 'x' in table()
 183               	    mov     byte, resCrcL   ; compute parity of 'x'
 184               	    swap    byte
 185               	    eor     byte, resCrcL
 186               	    mov     scratch, byte
 187               	    lsr     byte
 188               	    lsr     byte
 189               	    eor     byte, scratch
 190               	    inc     byte
 191               	    lsr     byte
 192               	    andi    byte, 1         ; byte is now parity(x)
 193               	    mov     scratch, resCrcL
 194               	    mov     resCrcL, resCrcH
 195               	    eor     resCrcL, byte   ; low byte of if(parity(x)) value ^= 0xc001;
 196               	    neg     byte
 197               	    andi    byte, 0xc0
 198               	    mov     resCrcH, byte   ; high byte of if(parity(x)) value ^= 0xc001;
 199               	    clr     byte
 200               	    lsr     scratch
 201               	    ror     byte
 202               	    eor     resCrcH, scratch
 203               	    eor     resCrcL, byte
 204               	    lsr     scratch
 205               	    ror     byte
 206               	    eor     resCrcH, scratch
 207               	    eor     resCrcL, byte
 208               	usbCrc16LoopTest:
 209               	    subi    argLen, 1
 210               	    brsh    usbCrc16ByteLoop
 211               	    com     resCrcL
 212               	    com     resCrcH
 213               	    ret
 214               	
 215               	#else   /* USB_USE_FAST_CRC */
 216               	
 217               	; This implementation is slower, but has less code size
 218               	;
 219               	; extern unsigned usbCrc16(unsigned char *argPtr, unsigned char argLen);
 220               	;   argPtr  r24+25 / r16+r17
 221               	;   argLen  r22 / r18
 222               	; temp variables:
 223               	;   byte    r18 / r22
 224               	;   bitCnt  r19
 225               	;   poly    r20+r21
 226               	;   scratch r23
 227               	;   resCrc  r24+r25 / r16+r17
 228               	;   ptr     X / Z
 229               	usbCrc16:
 230:usbdrvasm.S   ****     mov     ptrL, argPtrL
 231:usbdrvasm.S   ****     mov     ptrH, argPtrH
 232:usbdrvasm.S   ****     ldi     resCrcL, 0
 233:usbdrvasm.S   ****     ldi     resCrcH, 0
 234:usbdrvasm.S   ****     ldi     polyL, lo8(0xa001)
 235:usbdrvasm.S   ****     ldi     polyH, hi8(0xa001)
 236:usbdrvasm.S   ****     com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 237:usbdrvasm.S   ****     ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 238:usbdrvasm.S   ****     rjmp    usbCrcLoopEntry
 239               	usbCrcByteLoop:
 240:usbdrvasm.S   ****     ld      byte, ptr+
 241:usbdrvasm.S   ****     eor     resCrcL, byte
 242               	usbCrcBitLoop:
 243:usbdrvasm.S   ****     ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 244:usbdrvasm.S   ****     ror     resCrcL
 245:usbdrvasm.S   ****     brcs    usbCrcNoXor
 246:usbdrvasm.S   ****     eor     resCrcL, polyL
 247:usbdrvasm.S   ****     eor     resCrcH, polyH
 248               	usbCrcNoXor:
 249:usbdrvasm.S   ****     subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 250:usbdrvasm.S   ****     brcs    usbCrcBitLoop
 251               	usbCrcLoopEntry:
 252:usbdrvasm.S   ****     subi    argLen, -1
 253:usbdrvasm.S   ****     brcs    usbCrcByteLoop
 254               	usbCrcReady:
 255:usbdrvasm.S   ****     ret
 256               	; Thanks to Reimar Doeffinger for optimizing this CRC routine!
 257               	
 258               	#endif /* USB_USE_FAST_CRC */
 259               	
 260               	; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
 261               	usbCrc16Append:
 262:usbdrvasm.S   ****     rcall   usbCrc16
 263:usbdrvasm.S   ****     st      ptr+, resCrcL
 264:usbdrvasm.S   ****     st      ptr+, resCrcH
 265:usbdrvasm.S   ****     ret
 266               	
 267               	#undef argLen
 268               	#undef argPtrL
 269               	#undef argPtrH
 270               	#undef resCrcL
 271               	#undef resCrcH
 272               	#undef ptrL
 273               	#undef ptrH
 274               	#undef ptr
 275               	#undef byte
 276               	#undef bitCnt
 277               	#undef polyL
 278               	#undef polyH
 279               	#undef scratch
 280               	
 281               	
 282               	#if USB_CFG_HAVE_MEASURE_FRAME_LENGTH
 283               	#ifdef __IAR_SYSTEMS_ASM__
 284               	/* Register assignments for usbMeasureFrameLength on IAR cc */
 285               	/* Calling conventions on IAR:
 286               	 * First parameter passed in r16/r17, second in r18/r19 and so on.
 287               	 * Callee must preserve r4-r15, r24-r29 (r28/r29 is frame pointer)
 288               	 * Result is passed in r16/r17
 289               	 * In case of the "tiny" memory model, pointers are only 8 bit with no
 290               	 * padding. We therefore pass argument 1 as "16 bit unsigned".
 291               	 */
 292               	#   define resL     r16
 293               	#   define resH     r17
 294               	#   define cnt16L   r30
 295               	#   define cnt16H   r31
 296               	#   define cntH     r18
 297               	
 298               	#else  /* __IAR_SYSTEMS_ASM__ */ 
 299               	/* Register assignments for usbMeasureFrameLength on gcc */
 300               	/* Calling conventions on gcc:
 301               	 * First parameter passed in r24/r25, second in r22/23 and so on.
 302               	 * Callee must preserve r1-r17, r28/r29
 303               	 * Result is passed in r24/r25
 304               	 */
 305               	#   define resL     r24
 306               	#   define resH     r25
 307               	#   define cnt16L   r24
 308               	#   define cnt16H   r25
 309               	#   define cntH     r26
 310               	#endif
 311               	#   define cnt16    cnt16L
 312               	
 313               	; extern unsigned usbMeasurePacketLength(void);
 314               	; returns time between two idle strobes in multiples of 7 CPU clocks
 315               	.global usbMeasureFrameLength
 316               	usbMeasureFrameLength:
 317               	    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
 318               	    clr     cnt16L
 319               	    clr     cnt16H
 320               	usbMFTime16:
 321               	    dec     cntH
 322               	    breq    usbMFTimeout
 323               	usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
 324               	    sbiw    cnt16, 1        ;[0] [6]
 325               	    breq    usbMFTime16     ;[2]
 326               	    sbic    USBIN, USBMINUS ;[3]
 327               	    rjmp    usbMFWaitStrobe ;[4]
 328               	usbMFWaitIdle:              ; then wait until idle again
 329               	    sbis    USBIN, USBMINUS ;1 wait for D- == 1
 330               	    rjmp    usbMFWaitIdle   ;2
 331               	    ldi     cnt16L, 1       ;1 represents cycles so far
 332               	    clr     cnt16H          ;1
 333               	usbMFWaitLoop:
 334               	    in      cntH, USBIN     ;[0] [7]
 335               	    adiw    cnt16, 1        ;[1]
 336               	    breq    usbMFTimeout    ;[3]
 337               	    andi    cntH, USBMASK   ;[4]
 338               	    brne    usbMFWaitLoop   ;[5]
 339               	usbMFTimeout:
 340               	#if resL != cnt16L
 341               	    mov     resL, cnt16L
 342               	    mov     resH, cnt16H
 343               	#endif
 344               	    ret
 345               	
 346               	#undef resL
 347               	#undef resH
 348               	#undef cnt16
 349               	#undef cnt16L
 350               	#undef cnt16H
 351               	#undef cntH
 352               	
 353               	#endif  /* USB_CFG_HAVE_MEASURE_FRAME_LENGTH */
 354               	
 355               	;----------------------------------------------------------------------------
 356               	; Now include the clock rate specific code
 357               	;----------------------------------------------------------------------------
 358               	
 359               	#ifndef USB_CFG_CLOCK_KHZ
 360               	#   define USB_CFG_CLOCK_KHZ 12000
 361               	#endif
 362               	
 363               	#if USB_CFG_CHECK_CRC   /* separate dispatcher for CRC type modules */
 364               	#   if USB_CFG_CLOCK_KHZ == 18000
 365               	#       include "usbdrvasm18-crc.inc"
 366               	#   else
 367               	#       error "USB_CFG_CLOCK_KHZ is not one of the supported crc-rates!"
 368               	#   endif
 369               	#else   /* USB_CFG_CHECK_CRC */
 370               	#   if USB_CFG_CLOCK_KHZ == 12000
 371               	#       include "usbdrvasm12.inc"
 372               	#   elif USB_CFG_CLOCK_KHZ == 12800
 373               	#       include "usbdrvasm128.inc"
 374               	#   elif USB_CFG_CLOCK_KHZ == 15000
 375               	#       include "usbdrvasm15.inc"
 376               	#   elif USB_CFG_CLOCK_KHZ == 16000
 377               	#       include "usbdrvasm16.inc"
   1               	/* Name: usbdrvasm16.inc
   2               	 * Project: V-USB, virtual USB port for Atmel's(r) AVR(r) microcontrollers
   3               	 * Author: Christian Starkjohann
   4               	 * Creation Date: 2007-06-15
   5               	 * Tabsize: 4
   6               	 * Copyright: (c) 2007 by OBJECTIVE DEVELOPMENT Software GmbH
   7               	 * License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)
   8               	 * Revision: $Id: usbdrvasm16.inc 760 2009-08-09 18:59:43Z cs $
   9               	 */
  10               	
  11               	/* Do not link this file! Link usbdrvasm.S instead, which includes the
  12               	 * appropriate implementation!
  13               	 */
  14               	
  15               	/*
  16               	General Description:
  17               	This file is the 16 MHz version of the asssembler part of the USB driver. It
  18               	requires a 16 MHz crystal (not a ceramic resonator and not a calibrated RC
  19               	oscillator).
  20               	
  21               	See usbdrv.h for a description of the entire driver.
  22               	
  23               	Since almost all of this code is timing critical, don't change unless you
  24               	really know what you are doing! Many parts require not only a maximum number
  25               	of CPU cycles, but even an exact number of cycles!
  26               	*/
  27               	
  28               	;max stack usage: [ret(2), YL, SREG, YH, bitcnt, shift, x1, x2, x3, x4, cnt] = 12 bytes
  29               	;nominal frequency: 16 MHz -> 10.6666666 cycles per bit, 85.333333333 cycles per byte
  30               	; Numbers in brackets are clocks counted from center of last sync bit
  31               	; when instruction starts
  32               	
  33               	USB_INTR_VECTOR:
  34               	;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
  35:usbdrvasm16.inc ****     push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
  36:usbdrvasm16.inc ****     in      YL, SREG            ;[-23]
  37:usbdrvasm16.inc ****     push    YL                  ;[-22]
  38:usbdrvasm16.inc ****     push    YH                  ;[-20]
  39               	;----------------------------------------------------------------------------
  40               	; Synchronize with sync pattern:
  41               	;----------------------------------------------------------------------------
  42               	;sync byte (D-) pattern LSb to MSb: 01010100 [1 = idle = J, 0 = K]
  43               	;sync up with J to K edge during sync pattern -- use fastest possible loops
  44               	;The first part waits at most 1 bit long since we must be in sync pattern.
  45               	;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
  46               	;waitForJ, ensure that this prerequisite is met.
  47               	waitForJ:
  48:usbdrvasm16.inc ****     inc     YL
  49:usbdrvasm16.inc ****     sbis    USBIN, USBMINUS
  50:usbdrvasm16.inc ****     brne    waitForJ        ; just make sure we have ANY timeout
  51               	waitForK:
  52               	;The following code results in a sampling window of < 1/4 bit which meets the spec.
  53:usbdrvasm16.inc ****     sbis    USBIN, USBMINUS     ;[-15]
  54:usbdrvasm16.inc ****     rjmp    foundK              ;[-14]
  55:usbdrvasm16.inc ****     sbis    USBIN, USBMINUS
  56:usbdrvasm16.inc ****     rjmp    foundK
  57:usbdrvasm16.inc ****     sbis    USBIN, USBMINUS
  58:usbdrvasm16.inc ****     rjmp    foundK
  59:usbdrvasm16.inc ****     sbis    USBIN, USBMINUS
  60:usbdrvasm16.inc ****     rjmp    foundK
  61:usbdrvasm16.inc ****     sbis    USBIN, USBMINUS
  62:usbdrvasm16.inc ****     rjmp    foundK
  63:usbdrvasm16.inc ****     sbis    USBIN, USBMINUS
  64:usbdrvasm16.inc ****     rjmp    foundK
  65               	#if USB_COUNT_SOF
  66:usbdrvasm16.inc ****     lds     YL, usbSofCount
  67:usbdrvasm16.inc ****     inc     YL
  68:usbdrvasm16.inc ****     sts     usbSofCount, YL
  69:usbdrvasm16.inc **** #endif  /* USB_COUNT_SOF */
  70:usbdrvasm16.inc **** #ifdef USB_SOF_HOOK
  71:usbdrvasm16.inc ****     USB_SOF_HOOK
  72:usbdrvasm16.inc **** #endif
  73:usbdrvasm16.inc ****     rjmp    sofError
  74               	foundK:                         ;[-12]
  75               	;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
  76               	;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
  77               	;are cycles from center of first sync (double K) bit after the instruction
  78:usbdrvasm16.inc ****     push    bitcnt              ;[-12]
  79               	;   [---]                       ;[-11]
  80:usbdrvasm16.inc ****     lds     YL, usbInputBufOffset;[-10]
  81               	;   [---]                       ;[-9]
  82:usbdrvasm16.inc ****     clr     YH                  ;[-8]
  83:usbdrvasm16.inc ****     subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
  84:usbdrvasm16.inc ****     sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
  85:usbdrvasm16.inc ****     push    shift               ;[-5]
  86               	;   [---]                       ;[-4]
  87:usbdrvasm16.inc ****     ldi     bitcnt, 0x55        ;[-3] [rx loop init]
  88:usbdrvasm16.inc ****     sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
  89:usbdrvasm16.inc ****     rjmp    haveTwoBitsK        ;[-1]
  90:usbdrvasm16.inc ****     pop     shift               ;[0] undo the push from before
  91:usbdrvasm16.inc ****     pop     bitcnt              ;[2] undo the push from before
  92:usbdrvasm16.inc ****     rjmp    waitForK            ;[4] this was not the end of sync, retry
  93               	; The entire loop from waitForK until rjmp waitForK above must not exceed two
  94               	; bit times (= 21 cycles).
  95               	
  96               	;----------------------------------------------------------------------------
  97               	; push more registers and initialize values while we sample the first bits:
  98               	;----------------------------------------------------------------------------
  99               	haveTwoBitsK:
 100:usbdrvasm16.inc ****     push    x1              ;[1]
 101:usbdrvasm16.inc ****     push    x2              ;[3]
 102:usbdrvasm16.inc ****     push    x3              ;[5]
 103:usbdrvasm16.inc ****     ldi     shift, 0        ;[7]
 104:usbdrvasm16.inc ****     ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
 105:usbdrvasm16.inc ****     push    x4              ;[9] == leap
 106               	
 107:usbdrvasm16.inc ****     in      x1, USBIN       ;[11] <-- sample bit 0
 108:usbdrvasm16.inc ****     andi    x1, USBMASK     ;[12]
 109:usbdrvasm16.inc ****     bst     x1, USBMINUS    ;[13]
 110:usbdrvasm16.inc ****     bld     shift, 7        ;[14]
 111:usbdrvasm16.inc ****     push    cnt             ;[15]
 112:usbdrvasm16.inc ****     ldi     leap, 0         ;[17] [rx loop init]
 113:usbdrvasm16.inc ****     ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
 114:usbdrvasm16.inc ****     rjmp    rxbit1          ;[19] arrives at [21]
 115               	
 116               	;----------------------------------------------------------------------------
 117               	; Receiver loop (numbers in brackets are cycles within byte after instr)
 118               	;----------------------------------------------------------------------------
 119               	
 120               	; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
 121               	; accordingly to approximate this value in the long run.
 122               	
 123               	unstuff6:
 124:usbdrvasm16.inc ****     andi    x2, USBMASK ;[03]
 125:usbdrvasm16.inc ****     ori     x3, 1<<6    ;[04] will not be shifted any more
 126:usbdrvasm16.inc ****     andi    shift, ~0x80;[05]
 127:usbdrvasm16.inc ****     mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
 128:usbdrvasm16.inc ****     subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
 129:usbdrvasm16.inc ****     rjmp    didUnstuff6 ;[08]
 130               	
 131               	unstuff7:
 132:usbdrvasm16.inc ****     ori     x3, 1<<7    ;[09] will not be shifted any more
 133:usbdrvasm16.inc ****     in      x2, USBIN   ;[00] [10]  re-sample bit 7
 134:usbdrvasm16.inc ****     andi    x2, USBMASK ;[01]
 135:usbdrvasm16.inc ****     andi    shift, ~0x80;[02]
 136:usbdrvasm16.inc ****     subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
 137:usbdrvasm16.inc ****     rjmp    didUnstuff7 ;[04]
 138               	
 139               	unstuffEven:
 140:usbdrvasm16.inc ****     ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
 141:usbdrvasm16.inc ****     in      x1, USBIN   ;[00] [10]
 142:usbdrvasm16.inc ****     andi    shift, ~0x80;[01]
 143:usbdrvasm16.inc ****     andi    x1, USBMASK ;[02]
 144:usbdrvasm16.inc ****     breq    se0         ;[03]
 145:usbdrvasm16.inc ****     subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 146:usbdrvasm16.inc ****     nop2                ;[05]
 147:usbdrvasm16.inc ****     rjmp    didUnstuffE ;[06]
 148               	
 149               	unstuffOdd:
 150:usbdrvasm16.inc ****     ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
 151:usbdrvasm16.inc ****     in      x2, USBIN   ;[00] [10]
 152:usbdrvasm16.inc ****     andi    shift, ~0x80;[01]
 153:usbdrvasm16.inc ****     andi    x2, USBMASK ;[02]
 154:usbdrvasm16.inc ****     breq    se0         ;[03]
 155:usbdrvasm16.inc ****     subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 156:usbdrvasm16.inc ****     nop2                ;[05]
 157:usbdrvasm16.inc ****     rjmp    didUnstuffO ;[06]
 158               	
 159               	rxByteLoop:
 160:usbdrvasm16.inc ****     andi    x1, USBMASK ;[03]
 161:usbdrvasm16.inc ****     eor     x2, x1      ;[04]
 162:usbdrvasm16.inc ****     subi    leap, 1     ;[05]
 163:usbdrvasm16.inc ****     brpl    skipLeap    ;[06]
 164:usbdrvasm16.inc ****     subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
 165:usbdrvasm16.inc ****     nop                 ;1
 166               	skipLeap:
 167:usbdrvasm16.inc ****     subi    x2, 1       ;[08]
 168:usbdrvasm16.inc ****     ror     shift       ;[09]
 169               	didUnstuff6:
 170:usbdrvasm16.inc ****     cpi     shift, 0xfc ;[10]
 171:usbdrvasm16.inc ****     in      x2, USBIN   ;[00] [11] <-- sample bit 7
 172:usbdrvasm16.inc ****     brcc    unstuff6    ;[01]
 173:usbdrvasm16.inc ****     andi    x2, USBMASK ;[02]
 174:usbdrvasm16.inc ****     eor     x1, x2      ;[03]
 175:usbdrvasm16.inc ****     subi    x1, 1       ;[04]
 176:usbdrvasm16.inc ****     ror     shift       ;[05]
 177               	didUnstuff7:
 178:usbdrvasm16.inc ****     cpi     shift, 0xfc ;[06]
 179:usbdrvasm16.inc ****     brcc    unstuff7    ;[07]
 180:usbdrvasm16.inc ****     eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
 181:usbdrvasm16.inc ****     st      y+, x3      ;[09] store data
 182               	rxBitLoop:
 183:usbdrvasm16.inc ****     in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
 184:usbdrvasm16.inc ****     andi    x1, USBMASK ;[01]
 185:usbdrvasm16.inc ****     eor     x2, x1      ;[02]
 186:usbdrvasm16.inc ****     andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
 187:usbdrvasm16.inc ****     subi    x2, 1       ;[04]
 188:usbdrvasm16.inc ****     ror     shift       ;[05]
 189:usbdrvasm16.inc ****     cpi     shift, 0xfc ;[06]
 190:usbdrvasm16.inc ****     brcc    unstuffEven ;[07]
 191               	didUnstuffE:
 192:usbdrvasm16.inc ****     lsr     x3          ;[08]
 193:usbdrvasm16.inc ****     lsr     x3          ;[09]
 194               	rxbit1:
 195:usbdrvasm16.inc ****     in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
 196:usbdrvasm16.inc ****     andi    x2, USBMASK ;[01]
 197:usbdrvasm16.inc ****     breq    se0         ;[02]
 198:usbdrvasm16.inc ****     eor     x1, x2      ;[03]
 199:usbdrvasm16.inc ****     subi    x1, 1       ;[04]
 200:usbdrvasm16.inc ****     ror     shift       ;[05]
 201:usbdrvasm16.inc ****     cpi     shift, 0xfc ;[06]
 202:usbdrvasm16.inc ****     brcc    unstuffOdd  ;[07]
 203               	didUnstuffO:
 204:usbdrvasm16.inc ****     subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
 205:usbdrvasm16.inc ****     brcs    rxBitLoop   ;[09]
 206               	
 207:usbdrvasm16.inc ****     subi    cnt, 1      ;[10]
 208:usbdrvasm16.inc ****     in      x1, USBIN   ;[00] [11] <-- sample bit 6
 209:usbdrvasm16.inc ****     brcc    rxByteLoop  ;[01]
 210:usbdrvasm16.inc ****     rjmp    overflow
 211               	
 212               	macro POP_STANDARD ; 14 cycles
 213               	    pop     cnt
 214               	    pop     x4
 215               	    pop     x3
 216               	    pop     x2
 217               	    pop     x1
 218               	    pop     shift
 219               	    pop     bitcnt
 220               	    endm
 221               	macro POP_RETI     ; 7 cycles
 222               	    pop     YH
 223               	    pop     YL
 224               	    out     SREG, YL
 225               	    pop     YL
 226               	    endm
 227               	
 228               	#include "asmcommon.inc"
   1               	/* Name: asmcommon.inc
   2               	 * Project: V-USB, virtual USB port for Atmel's(r) AVR(r) microcontrollers
   3               	 * Author: Christian Starkjohann
   4               	 * Creation Date: 2007-11-05
   5               	 * Tabsize: 4
   6               	 * Copyright: (c) 2007 by OBJECTIVE DEVELOPMENT Software GmbH
   7               	 * License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)
   8               	 * Revision: $Id$
   9               	 */
  10               	
  11               	/* Do not link this file! Link usbdrvasm.S instead, which includes the
  12               	 * appropriate implementation!
  13               	 */
  14               	
  15               	/*
  16               	General Description:
  17               	This file contains assembler code which is shared among the USB driver
  18               	implementations for different CPU cocks. Since the code must be inserted
  19               	in the middle of the module, it's split out into this file and #included.
  20               	
  21               	Jump destinations called from outside:
  22               	    sofError: Called when no start sequence was found.
  23               	    se0: Called when a package has been successfully received.
  24               	    overflow: Called when receive buffer overflows.
  25               	    doReturn: Called after sending data.
  26               	
  27               	Outside jump destinations used by this module:
  28               	    waitForJ: Called to receive an already arriving packet.
  29               	    sendAckAndReti:
  30               	    sendNakAndReti:
  31               	    sendCntAndReti:
  32               	    usbSendAndReti:
  33               	
  34               	The following macros must be defined before this file is included:
  35               	    .macro POP_STANDARD
  36               	    .endm
  37               	    .macro POP_RETI
  38               	    .endm
  39               	*/
  40               	
  41               	#define token   x1
  42               	
  43               	overflow:
  44:asmcommon.inc ****     ldi     x2, 1<<USB_INTR_PENDING_BIT
  45:asmcommon.inc ****     USB_STORE_PENDING(x2)       ; clear any pending interrupts
  46               	ignorePacket:
  47:asmcommon.inc ****     clr     token
  48:asmcommon.inc ****     rjmp    storeTokenAndReturn
  49               	
  50               	;----------------------------------------------------------------------------
  51               	; Processing of received packet (numbers in brackets are cycles after center of SE0)
  52               	;----------------------------------------------------------------------------
  53               	;This is the only non-error exit point for the software receiver loop
  54               	;we don't check any CRCs here because there is no time left.
  55               	se0:
  56:asmcommon.inc ****     subi    cnt, USB_BUFSIZE    ;[5]
  57:asmcommon.inc ****     neg     cnt                 ;[6]
  58:asmcommon.inc ****     sub     YL, cnt             ;[7]
  59:asmcommon.inc ****     sbci    YH, 0               ;[8]
  60:asmcommon.inc ****     ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
  61:asmcommon.inc ****     USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
  62:asmcommon.inc ****     ld      token, y            ;[11]
  63:asmcommon.inc ****     cpi     token, USBPID_DATA0 ;[13]
  64:asmcommon.inc ****     breq    handleData          ;[14]
  65:asmcommon.inc ****     cpi     token, USBPID_DATA1 ;[15]
  66:asmcommon.inc ****     breq    handleData          ;[16]
  67:asmcommon.inc ****     lds     shift, usbDeviceAddr;[17]
  68:asmcommon.inc ****     ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
  69:asmcommon.inc ****     lsl     x2                  ;[21] shift out 1 bit endpoint number
  70:asmcommon.inc ****     cpse    x2, shift           ;[22]
  71:asmcommon.inc ****     rjmp    ignorePacket        ;[23]
  72               	/* only compute endpoint number in x3 if required later */
  73               	#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
  74:asmcommon.inc ****     ldd     x3, y+2             ;[24] endpoint number + crc
  75:asmcommon.inc ****     rol     x3                  ;[26] shift in LSB of endpoint
  76               	#endif
  77:asmcommon.inc ****     cpi     token, USBPID_IN    ;[27]
  78:asmcommon.inc ****     breq    handleIn            ;[28]
  79:asmcommon.inc ****     cpi     token, USBPID_SETUP ;[29]
  80:asmcommon.inc ****     breq    handleSetupOrOut    ;[30]
  81:asmcommon.inc ****     cpi     token, USBPID_OUT   ;[31]
  82:asmcommon.inc ****     brne    ignorePacket        ;[32] must be ack, nak or whatever
  83               	;   rjmp    handleSetupOrOut    ; fallthrough
  84               	
  85               	;Setup and Out are followed by a data packet two bit times (16 cycles) after
  86               	;the end of SE0. The sync code allows up to 40 cycles delay from the start of
  87               	;the sync pattern until the first bit is sampled. That's a total of 56 cycles.
  88               	handleSetupOrOut:               ;[32]
  89               	#if USB_CFG_IMPLEMENT_FN_WRITEOUT   /* if we have data for endpoint != 0, set usbCurrentTok to addr
  90               	    andi    x3, 0xf             ;[32]
  91               	    breq    storeTokenAndReturn ;[33]
  92               	    mov     token, x3           ;[34] indicate that this is endpoint x OUT
  93               	#endif
  94               	storeTokenAndReturn:
  95:asmcommon.inc ****     sts     usbCurrentTok, token;[35]
  96               	doReturn:
  97:asmcommon.inc ****     POP_STANDARD                ;[37] 12...16 cycles
  98:asmcommon.inc ****     USB_LOAD_PENDING(YL)        ;[49]
  99:asmcommon.inc ****     sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 100:asmcommon.inc ****     rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pendin
 101               	sofError:
 102:asmcommon.inc ****     POP_RETI                    ;macro call
 103:asmcommon.inc ****     reti
 104               	
 105               	handleData:
 106               	#if USB_CFG_CHECK_CRC
 107               	    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
 108               	#endif
 109:asmcommon.inc ****     lds     shift, usbCurrentTok;[18]
 110:asmcommon.inc ****     tst     shift               ;[20]
 111:asmcommon.inc ****     breq    doReturn            ;[21]
 112:asmcommon.inc ****     lds     x2, usbRxLen        ;[22]
 113:asmcommon.inc ****     tst     x2                  ;[24]
 114:asmcommon.inc ****     brne    sendNakAndReti      ;[25]
 115               	; 2006-03-11: The following two lines fix a problem where the device was not
 116               	; recognized if usbPoll() was called less frequently than once every 4 ms.
 117:asmcommon.inc ****     cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and a
 118:asmcommon.inc ****     brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 119               	#if USB_CFG_CHECK_DATA_TOGGLING
 120               	    sts     usbCurrentDataToken, token  ; store for checking by C code
 121               	#endif
 122:asmcommon.inc ****     sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 123:asmcommon.inc ****     sts     usbRxToken, shift   ;[30]
 124:asmcommon.inc ****     lds     x2, usbInputBufOffset;[32] swap buffers
 125:asmcommon.inc ****     ldi     cnt, USB_BUFSIZE    ;[34]
 126:asmcommon.inc ****     sub     cnt, x2             ;[35]
 127:asmcommon.inc ****     sts     usbInputBufOffset, cnt;[36] buffers now swapped
 128:asmcommon.inc ****     rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 129               	
 130               	handleIn:
 131               	;We don't send any data as long as the C code has not processed the current
 132               	;input data and potentially updated the output data. That's more efficient
 133               	;in terms of code size than clearing the tx buffers when a packet is received.
 134:asmcommon.inc ****     lds     x1, usbRxLen        ;[30]
 135:asmcommon.inc ****     cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 136:asmcommon.inc ****     brge    sendNakAndReti      ;[33] unprocessed input packet?
 137:asmcommon.inc ****     ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 138               	#if USB_CFG_HAVE_INTRIN_ENDPOINT
 139:asmcommon.inc ****     andi    x3, 0xf             ;[35] x3 contains endpoint
 140               	#if USB_CFG_SUPPRESS_INTR_CODE
 141               	    brne    sendNakAndReti      ;[36]
 142               	#else
 143:asmcommon.inc ****     brne    handleIn1           ;[36]
 144               	#endif
 145               	#endif
 146:asmcommon.inc ****     lds     cnt, usbTxLen       ;[37]
 147:asmcommon.inc ****     sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 148:asmcommon.inc ****     rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 149:asmcommon.inc ****     sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 150:asmcommon.inc ****     ldi     YL, lo8(usbTxBuf)   ;[43]
 151:asmcommon.inc ****     ldi     YH, hi8(usbTxBuf)   ;[44]
 152:asmcommon.inc ****     rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 153               	
 154               	; Comment about when to set usbTxLen to USBPID_NAK:
 155               	; We should set it back when we receive the ACK from the host. This would
 156               	; be simple to implement: One static variable which stores whether the last
 157               	; tx was for endpoint 0 or 1 and a compare in the receiver to distinguish the
 158               	; ACK. However, we set it back immediately when we send the package,
 159               	; assuming that no error occurs and the host sends an ACK. We save one byte
 160               	; RAM this way and avoid potential problems with endless retries. The rest of
 161               	; the driver assumes error-free transfers anyway.
 162               	
 163               	#if !USB_CFG_SUPPRESS_INTR_CODE && USB_CFG_HAVE_INTRIN_ENDPOINT /* placed here due to relative jump
 164               	handleIn1:                      ;[38]
 165               	#if USB_CFG_HAVE_INTRIN_ENDPOINT3
 166               	; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
 167               	    cpi     x3, USB_CFG_EP3_NUMBER;[38]
 168               	    breq    handleIn3           ;[39]
 169               	#endif
 170:asmcommon.inc ****     lds     cnt, usbTxLen1      ;[40]
 171:asmcommon.inc ****     sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 172:asmcommon.inc ****     rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 173:asmcommon.inc ****     sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 174:asmcommon.inc ****     ldi     YL, lo8(usbTxBuf1)  ;[46]
 175:asmcommon.inc ****     ldi     YH, hi8(usbTxBuf1)  ;[47]
 176:asmcommon.inc ****     rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 177               	
 229               	
 230               	; USB spec says:
 231               	; idle = J
 232               	; J = (D+ = 0), (D- = 1)
 233               	; K = (D+ = 1), (D- = 0)
 234               	; Spec allows 7.5 bit times from EOP to SOP for replies
 235               	
 236               	bitstuffN:
 237:usbdrvasm16.inc ****     eor     x1, x4          ;[5]
 238:usbdrvasm16.inc ****     ldi     x2, 0           ;[6]
 239:usbdrvasm16.inc ****     nop2                    ;[7]
 240:usbdrvasm16.inc ****     nop                     ;[9]
 241:usbdrvasm16.inc ****     out     USBOUT, x1      ;[10] <-- out
 242:usbdrvasm16.inc ****     rjmp    didStuffN       ;[0]
 243               	    
 244               	bitstuff6:
 245:usbdrvasm16.inc ****     eor     x1, x4          ;[5]
 246:usbdrvasm16.inc ****     ldi     x2, 0           ;[6] Carry is zero due to brcc
 247:usbdrvasm16.inc ****     rol     shift           ;[7] compensate for ror shift at branch destination
 248:usbdrvasm16.inc ****     rjmp    didStuff6       ;[8]
 249               	
 250               	bitstuff7:
 251:usbdrvasm16.inc ****     ldi     x2, 0           ;[2] Carry is zero due to brcc
 252:usbdrvasm16.inc ****     rjmp    didStuff7       ;[3]
 253               	
 254               	
 255               	sendNakAndReti:
 256:usbdrvasm16.inc ****     ldi     x3, USBPID_NAK  ;[-18]
 257:usbdrvasm16.inc ****     rjmp    sendX3AndReti   ;[-17]
 258               	sendAckAndReti:
 259:usbdrvasm16.inc ****     ldi     cnt, USBPID_ACK ;[-17]
 260               	sendCntAndReti:
 261:usbdrvasm16.inc ****     mov     x3, cnt         ;[-16]
 262               	sendX3AndReti:
 263:usbdrvasm16.inc ****     ldi     YL, 20          ;[-15] x3==r20 address is 20
 264:usbdrvasm16.inc ****     ldi     YH, 0           ;[-14]
 265:usbdrvasm16.inc ****     ldi     cnt, 2          ;[-13]
 266               	;   rjmp    usbSendAndReti      fallthrough
 267               	
 268               	;usbSend:
 269               	;pointer to data in 'Y'
 270               	;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
 271               	;uses: x1...x4, btcnt, shift, cnt, Y
 272               	;Numbers in brackets are time since first bit of sync pattern is sent
 273               	;We don't match the transfer rate exactly (don't insert leap cycles every third
 274               	;byte) because the spec demands only 1.5% precision anyway.
 275               	usbSendAndReti:             ; 12 cycles until SOP
 276:usbdrvasm16.inc ****     in      x2, USBDDR      ;[-12]
 277:usbdrvasm16.inc ****     ori     x2, USBMASK     ;[-11]
 278:usbdrvasm16.inc ****     sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 279:usbdrvasm16.inc ****     in      x1, USBOUT      ;[-8] port mirror for tx loop
 280:usbdrvasm16.inc ****     out     USBDDR, x2      ;[-7] <- acquire bus
 281               	; need not init x2 (bitstuff history) because sync starts with 0
 282:usbdrvasm16.inc ****     ldi     x4, USBMASK     ;[-6] exor mask
 283:usbdrvasm16.inc ****     ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 284               	txByteLoop:
 285:usbdrvasm16.inc ****     ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
 286               	txBitLoop:
 287:usbdrvasm16.inc ****     sbrs    shift, 0        ;[-3] [7]
 288:usbdrvasm16.inc ****     eor     x1, x4          ;[-2] [8]
 289:usbdrvasm16.inc ****     out     USBOUT, x1      ;[-1] [9] <-- out N
 290:usbdrvasm16.inc ****     ror     shift           ;[0] [10]
 291:usbdrvasm16.inc ****     ror     x2              ;[1]
 292               	didStuffN:
 293:usbdrvasm16.inc ****     cpi     x2, 0xfc        ;[2]
 294:usbdrvasm16.inc ****     brcc    bitstuffN       ;[3]
 295:usbdrvasm16.inc ****     lsr     bitcnt          ;[4]
 296:usbdrvasm16.inc ****     brcc    txBitLoop       ;[5]
 297:usbdrvasm16.inc ****     brne    txBitLoop       ;[6]
 298               	
 299:usbdrvasm16.inc ****     sbrs    shift, 0        ;[7]
 300:usbdrvasm16.inc ****     eor     x1, x4          ;[8]
 301               	didStuff6:
 302:usbdrvasm16.inc ****     out     USBOUT, x1      ;[-1] [9] <-- out 6
 303:usbdrvasm16.inc ****     ror     shift           ;[0] [10]
 304:usbdrvasm16.inc ****     ror     x2              ;[1]
 305:usbdrvasm16.inc ****     cpi     x2, 0xfc        ;[2]
 306:usbdrvasm16.inc ****     brcc    bitstuff6       ;[3]
 307:usbdrvasm16.inc ****     ror     shift           ;[4]
 308               	didStuff7:
 309:usbdrvasm16.inc ****     ror     x2              ;[5]
 310:usbdrvasm16.inc ****     sbrs    x2, 7           ;[6]
 311:usbdrvasm16.inc ****     eor     x1, x4          ;[7]
 312:usbdrvasm16.inc ****     nop                     ;[8]
 313:usbdrvasm16.inc ****     cpi     x2, 0xfc        ;[9]
 314:usbdrvasm16.inc ****     out     USBOUT, x1      ;[-1][10] <-- out 7
 315:usbdrvasm16.inc ****     brcc    bitstuff7       ;[0] [11]
 316:usbdrvasm16.inc ****     ld      shift, y+       ;[1]
 317:usbdrvasm16.inc ****     dec     cnt             ;[3]
 318:usbdrvasm16.inc ****     brne    txByteLoop      ;[4]
 319               	;make SE0:
 320:usbdrvasm16.inc ****     cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 321:usbdrvasm16.inc ****     lds     x2, usbNewDeviceAddr;[6]
 322:usbdrvasm16.inc ****     lsl     x2              ;[8] we compare with left shifted address
 323:usbdrvasm16.inc ****     subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
 324:usbdrvasm16.inc ****     sbci    YH, 0           ;[10]
 325:usbdrvasm16.inc ****     out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 326               	;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
 327               	;set address only after data packet was sent, not after handshake
 328:usbdrvasm16.inc ****     breq    skipAddrAssign  ;[0]
 329:usbdrvasm16.inc ****     sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 330               	skipAddrAssign:
 331               	;end of usbDeviceAddress transfer
 332:usbdrvasm16.inc ****     ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
 333:usbdrvasm16.inc ****     USB_STORE_PENDING(x2)   ;[3]
 334:usbdrvasm16.inc ****     ori     x1, USBIDLE     ;[4]
 335:usbdrvasm16.inc ****     in      x2, USBDDR      ;[5]
 336:usbdrvasm16.inc ****     cbr     x2, USBMASK     ;[6] set both pins to input
 337:usbdrvasm16.inc ****     mov     x3, x1          ;[7]
 338:usbdrvasm16.inc ****     cbr     x3, USBMASK     ;[8] configure no pullup on both pins
 339:usbdrvasm16.inc ****     ldi     x4, 4           ;[9]
 340               	se0Delay:
 341:usbdrvasm16.inc ****     dec     x4              ;[10] [13] [16] [19]
 342:usbdrvasm16.inc ****     brne    se0Delay        ;[11] [14] [17] [20]
 343:usbdrvasm16.inc ****     out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
 344:usbdrvasm16.inc ****     out     USBDDR, x2      ;[22] <-- release bus now
 345:usbdrvasm16.inc ****     out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
 346:usbdrvasm16.inc ****     rjmp    doReturn
 347               	...
DEFINED SYMBOLS
     usbdrvasm16.inc:33     .text:0000000000000032 __vector_1
         usbdrvasm.S:229    .text:0000000000000000 usbCrc16
         usbdrvasm.S:261    .text:000000000000002a usbCrc16Append
         usbdrvasm.S:251    .text:0000000000000024 usbCrcLoopEntry
         usbdrvasm.S:239    .text:0000000000000012 usbCrcByteLoop
         usbdrvasm.S:242    .text:0000000000000016 usbCrcBitLoop
         usbdrvasm.S:248    .text:0000000000000020 usbCrcNoXor
         usbdrvasm.S:254    .text:0000000000000028 usbCrcReady
     usbdrvasm16.inc:47     .text:000000000000003a waitForJ
     usbdrvasm16.inc:51     .text:0000000000000040 waitForK
     usbdrvasm16.inc:74     .text:000000000000005a foundK
       asmcommon.inc:101    .text:0000000000000170 sofError
     usbdrvasm16.inc:99     .text:0000000000000074 haveTwoBitsK
     usbdrvasm16.inc:194    .text:0000000000000102 rxbit1
     usbdrvasm16.inc:123    .text:0000000000000090 unstuff6
     usbdrvasm16.inc:169    .text:00000000000000d8 didUnstuff6
     usbdrvasm16.inc:131    .text:000000000000009c unstuff7
     usbdrvasm16.inc:177    .text:00000000000000e6 didUnstuff7
     usbdrvasm16.inc:139    .text:00000000000000a8 unstuffEven
       asmcommon.inc:55     .text:0000000000000126 se0
     usbdrvasm16.inc:191    .text:00000000000000fe didUnstuffE
     usbdrvasm16.inc:149    .text:00000000000000b8 unstuffOdd
     usbdrvasm16.inc:203    .text:0000000000000112 didUnstuffO
     usbdrvasm16.inc:159    .text:00000000000000c8 rxByteLoop
     usbdrvasm16.inc:166    .text:00000000000000d4 skipLeap
     usbdrvasm16.inc:182    .text:00000000000000ee rxBitLoop
       asmcommon.inc:43     .text:000000000000011e overflow
       asmcommon.inc:46     .text:0000000000000122 ignorePacket
       asmcommon.inc:94     .text:0000000000000158 storeTokenAndReturn
       asmcommon.inc:105    .text:000000000000017a handleData
       asmcommon.inc:130    .text:00000000000001a4 handleIn
       asmcommon.inc:88     .text:0000000000000158 handleSetupOrOut
       asmcommon.inc:96     .text:000000000000015c doReturn
     usbdrvasm16.inc:255    .text:00000000000001ee sendNakAndReti
     usbdrvasm16.inc:258    .text:00000000000001f2 sendAckAndReti
       asmcommon.inc:164    .text:00000000000001c4 handleIn1
     usbdrvasm16.inc:260    .text:00000000000001f4 sendCntAndReti
     usbdrvasm16.inc:275    .text:00000000000001fc usbSendAndReti
     usbdrvasm16.inc:236    .text:00000000000001d6 bitstuffN
     usbdrvasm16.inc:292    .text:0000000000000216 didStuffN
     usbdrvasm16.inc:244    .text:00000000000001e2 bitstuff6
     usbdrvasm16.inc:301    .text:0000000000000224 didStuff6
     usbdrvasm16.inc:250    .text:00000000000001ea bitstuff7
     usbdrvasm16.inc:308    .text:0000000000000230 didStuff7
     usbdrvasm16.inc:262    .text:00000000000001f6 sendX3AndReti
     usbdrvasm16.inc:284    .text:000000000000020a txByteLoop
     usbdrvasm16.inc:286    .text:000000000000020c txBitLoop
     usbdrvasm16.inc:330    .text:0000000000000258 skipAddrAssign
     usbdrvasm16.inc:340    .text:0000000000000268 se0Delay

UNDEFINED SYMBOLS
usbInputBufOffset
usbRxBuf
usbDeviceAddr
usbCurrentTok
usbRxLen
usbRxToken
usbTxLen
usbTxBuf
usbTxStatus1
usbNewDeviceAddr
